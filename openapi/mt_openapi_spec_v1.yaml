---
openapi: 3.0.1
info:
  title: Modern Treasury
  version: v1
  contact:
    name: Modern Treasury Engineering Team
    url: https://moderntreasury.com
  description: The Modern Treasury REST API. Please see https://docs.moderntreasury.com
    for more details.
paths:
  "/api/{accounts_type}/{account_id}/account_details":
    get:
      summary: list account_details
      tags:
      - AccountDetail
      description: Get a list of account details for a single internal or external
        account.
      operationId: listAccountDetails
      security:
      - basic_auth: []
      parameters:
      - name: accounts_type
        in: path
        schema:
          type: string
          enum:
          - external_accounts
          - internal_accounts
        required: true
      - name: account_id
        in: path
        description: The ID of the account.
        required: true
        schema:
          type: string
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/account_detail"
    post:
      summary: create account_detail
      tags:
      - AccountDetail
      description: Create an account detail for an external account.
      operationId: createAccountDetail
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      - name: accounts_type
        in: path
        schema:
          type: string
          enum:
          - external_accounts
        required: true
      - name: account_id
        in: path
        description: The ID of the account.
        required: true
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/account_detail"
        '404':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/account_detail_create_request"
  "/api/{accounts_type}/{account_id}/account_details/{id}":
    get:
      summary: get account_detail
      tags:
      - AccountDetail
      description: Get a single account detail for a single internal or external account.
      operationId: getAccountDetail
      security:
      - basic_auth: []
      parameters:
      - name: accounts_type
        in: path
        schema:
          type: string
          enum:
          - external_accounts
          - internal_accounts
        required: true
      - name: account_id
        in: path
        description: The ID of the account.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the account detail.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/account_detail"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    delete:
      summary: delete account_detail
      tags:
      - AccountDetail
      description: Delete a single account detail for an external account.
      operationId: deleteAccountDetail
      security:
      - basic_auth: []
      parameters:
      - name: accounts_type
        in: path
        schema:
          type: string
          enum:
          - external_accounts
        required: true
      - name: account_id
        in: path
        description: The ID of the account.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the account detail.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: successful
  "/api/internal_accounts/{internal_account_id}/balance_reports":
    get:
      summary: list balance_reports
      tags:
      - BalanceReport
      description: Get all balance reports for a given internal account.
      operationId: listBalanceReports
      security:
      - basic_auth: []
      parameters:
      - name: internal_account_id
        in: path
        required: true
        schema:
          type: string
      - name: as_of_date
        in: query
        schema:
          type: string
          format: date
        required: false
        description: The date of the balance report in local time.
      - name: balance_report_type
        in: query
        schema:
          type: string
          enum:
          - intraday
          - other
          - previous_day
          - real_time
        required: false
        description: The specific type of balance report. One of `intraday`, `previous_day`,
          `real_time`, or `other`.
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/balance_report"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/internal_accounts/{internal_account_id}/balance_reports/{id}":
    get:
      summary: get balance_report
      tags:
      - BalanceReport
      description: Get a single balance report for a given internal account.
      operationId: getBalanceReport
      security:
      - basic_auth: []
      parameters:
      - name: internal_account_id
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: Either the unique identifier of the balance report or latest
          for the latest balance report.
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/balance_report"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/connections":
    get:
      summary: list connections
      tags:
      - Connection
      operationId: listConnections
      description: Get a list of all connections.
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: vendor_customer_id
        in: query
        schema:
          type: string
          format: uuid
        required: false
        description: An identifier assigned by the vendor to your organization.
      - name: entity
        in: query
        schema:
          type: string
        required: false
        description: A string code representing the vendor (i.e. bank).
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/connection"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/counterparties/{id}/collect_account":
    post:
      summary: collect account details
      tags:
      - Counterparty
      operationId: collectAccountDetails
      description: Send an email requesting account details.
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      - name: id
        in: path
        description: counterparty id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/counterparty_collect_account_response"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/counterparty_collect_account_request"
  "/api/counterparties":
    get:
      summary: list counterparties
      tags:
      - Counterparty
      operationId: listCounterparties
      description: Get a paginated list of all counterparties.
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Performs a partial string match of the name field. This is also
          case insensitive.
        schema:
          type: string
      - name: email
        in: query
        schema:
          type: string
          format: email
        required: false
        description: Performs a partial string match of the email field. This is also
          case insensitive.
      - "$ref": "#/components/parameters/metadata_query"
      - name: created_at_lower_bound
        in: query
        schema:
          type: string
          format: date-time
        required: false
        description: Used to return counterparties created after some datetime.
      - name: created_at_upper_bound
        in: query
        schema:
          type: string
          format: date-time
        required: false
        description: Used to return counterparties created before some datetime.
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/counterparty"
        '400':
          description: bad_request
        '401':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    post:
      summary: create counterparty
      tags:
      - Counterparty
      operationId: createCounterparty
      description: Create a new counterparty.
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/counterparty"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '415':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/counterparty_create_request"
  "/api/counterparties/{id}":
    parameters:
    - name: id
      in: path
      description: The id of an existing counterparty.
      required: true
      schema:
        type: string
    get:
      summary: show counterparty
      tags:
      - Counterparty
      operationId: getCounterparty
      description: Get details on a single counterparty.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/counterparty"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update counterparty
      tags:
      - Counterparty
      operationId: updateCounterparty
      description: Updates a given counterparty with new information.
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/counterparty"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/counterparty_update_request"
    delete:
      summary: delete counterparty
      tags:
      - Counterparty
      operationId: deleteCounterparty
      description: Deletes a given counterparty.
      security:
      - basic_auth: []
      responses:
        '204':
          description: successful
  "/api/{documentable_type}/{documentable_id}/documents":
    get:
      summary: list documents
      tags:
      - Document
      description: Get a list of documents.
      operationId: listDocuments
      security:
      - basic_auth: []
      parameters:
      - name: documentable_id
        in: path
        schema:
          type: string
        description: The unique identifier for the associated object.
        required: true
      - name: documentable_type
        in: path
        schema:
          type: string
          enum:
          - cases
          - counterparties
          - expected_payments
          - external_accounts
          - internal_accounts
          - organizations
          - paper_items
          - payment_orders
          - transactions
        description: The type of the associated object. Currently can be one of `payment_order`,
          `transaction`, `paper_item`, `expected_payment`, `counterparty`, `organization`,
          `case`, `internal_account` or `external_account`.
        required: true
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/document"
    post:
      summary: create document
      tags:
      - Document
      description: Create a document.
      operationId: createDocument
      security:
      - basic_auth: []
      parameters:
      - name: documentable_id
        in: path
        schema:
          type: string
        description: The unique identifier for the associated object.
        required: true
      - name: documentable_type
        in: path
        schema:
          type: string
          enum:
          - cases
          - counterparties
          - expected_payments
          - external_accounts
          - internal_accounts
          - organizations
          - paper_items
          - payment_orders
          - transactions
        description: The type of the associated object. Currently can be one of `payment_order`,
          `transaction`, `paper_item`, `expected_payment`, `counterparty`, `organization`,
          `case`, `internal_account` or `external_account`.
        required: true
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/document"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/document_create_request"
  "/api/{documentable_type}/{documentable_id}/documents/{id}":
    parameters:
    - name: documentable_id
      in: path
      schema:
        type: string
      description: The unique identifier for the associated object.
      required: true
    - name: documentable_type
      in: path
      schema:
        type: string
        enum:
        - cases
        - counterparties
        - expected_payments
        - external_accounts
        - internal_accounts
        - organizations
        - paper_items
        - payment_orders
        - transactions
      description: The type of the associated object. Currently can be one of `payment_order`,
        `transaction`, `paper_item`, `expected_payment`, `counterparty`, `organization`,
        `case`, `internal_account` or `external_account`.
      required: true
    - name: id
      in: path
      schema:
        type: string
        format: uuid
      description: The ID of the document.
      required: true
    get:
      summary: get document
      tags:
      - Document
      description: Get an existing document.
      operationId: getDocument
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/document"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/{documentable_type}/{documentable_id}/documents/{id}/download":
    parameters:
    - name: documentable_id
      in: path
      schema:
        type: string
      description: The unique identifier for the associated object.
      required: true
    - name: documentable_type
      in: path
      schema:
        type: string
        enum:
        - cases
        - counterparties
        - expected_payments
        - external_accounts
        - internal_accounts
        - organizations
        - paper_items
        - payment_orders
        - transactions
      description: The type of the associated object. Currently can be one of `payment_order`,
        `transaction`, `paper_item`, `expected_payment`, `counterparty`, `organization`,
        `case`, `internal_account` or `external_account`.
      required: true
    - name: id
      in: path
      schema:
        type: string
        format: uuid
      description: The ID of the document.
      required: true
    get:
      summary: download document
      tags:
      - Document
      description: Download an existing document.
      operationId: downloadDocument
      security:
      - basic_auth: []
      responses:
        '302':
          description: redirect
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/events":
    get:
      summary: list events
      tags:
      - Event
      operationId: listEvents
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: event_time_start
        in: query
        schema:
          type: string
          format: date-time
        required: false
        description: An inclusive lower bound for when the event occurred
      - name: event_time_end
        in: query
        schema:
          type: string
          format: date-time
        required: false
        description: An inclusive upper bound for when the event occurred
      - name: resource
        in: query
        required: false
        schema:
          type: string
      - name: entity_id
        in: query
        required: false
        schema:
          type: string
      - name: event_name
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/event"
  "/api/events/{id}":
    parameters:
    - name: id
      in: path
      required: true
      description: event id
      schema:
        type: string
    get:
      summary: get event
      tags:
      - Event
      operationId: getEvent
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/event"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/expected_payments":
    get:
      summary: list expected_payments
      tags:
      - ExpectedPayment
      operationId: listExpectedPayments
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: status
        in: query
        schema:
          type: string
          enum:
          - archived
          - reconciled
          - unreconciled
        required: false
        description: One of unreconciled, reconciled, or archived.
      - name: internal_account_id
        in: query
        required: false
        description: Specify internal_account_id to see expected_payments for a specific
          account.
        schema:
          type: string
      - name: direction
        in: query
        schema:
          type: string
          enum:
          - credit
          - debit
        required: false
        description: One of credit, debit
      - name: type
        in: query
        schema:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
        required: false
        description: 'One of: ach, au_becs, bacs, book, check, eft, interac, provxchange,
          rtp,sen, sepa, signet, wire'
      - name: counterparty_id
        in: query
        required: false
        description: Specify counterparty_id to see expected_payments for a specific
          account.
        schema:
          type: string
      - "$ref": "#/components/parameters/metadata_query"
      - name: created_at_lower_bound
        in: query
        schema:
          type: string
          format: date-time
        required: false
        description: Used to return expected payments created after some datetime
      - name: created_at_upper_bound
        in: query
        schema:
          type: string
          format: date-time
        required: false
        description: Used to return expected payments created before some datetime
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/expected_payment"
        '401':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    post:
      summary: create expected payment
      tags:
      - ExpectedPayment
      operationId: createExpectedPayment
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/expected_payment"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/expected_payment_create_request"
  "/api/expected_payments/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: get expected payment
      tags:
      - ExpectedPayment
      operationId: getExpectedPayment
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/expected_payment"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update expected payment
      tags:
      - ExpectedPayment
      operationId: updateExpectedPayment
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/expected_payment"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/expected_payment_update_request"
    delete:
      summary: delete expected payment
      tags:
      - ExpectedPayment
      operationId: deleteExpectedPayment
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/expected_payment"
        '422':
          description: parameter_invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/external_accounts/{id}/verify":
    post:
      summary: verify external account
      tags:
      - ExternalAccount
      operationId: verifyExternalAccount
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      - name: id
        in: path
        description: external account id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/external_account"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/external_account_verify_request"
  "/api/external_accounts/{id}/complete_verification":
    post:
      summary: complete verification of external account
      tags:
      - ExternalAccount
      operationId: completeVerificationExternalAccount
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      - name: id
        in: path
        description: external account id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/external_account"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/external_account_complete_verification_request"
  "/api/external_accounts":
    get:
      summary: list external accounts
      tags:
      - ExternalAccount
      operationId: listExternalAccounts
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: party_name
        in: query
        required: false
        description: Searches the ExternalAccount's party_name AND the Counterparty's
          party_name
        schema:
          type: string
      - name: counterparty_id
        in: query
        required: false
        schema:
          type: string
      - "$ref": "#/components/parameters/metadata_query"
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/external_account"
        '401':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    post:
      summary: create external account
      tags:
      - ExternalAccount
      operationId: createExternalAccount
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/external_account"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/external_account_create_request"
  "/api/external_accounts/{id}":
    parameters:
    - name: id
      in: path
      description: external account id
      required: true
      schema:
        type: string
    get:
      summary: show external account
      tags:
      - ExternalAccount
      operationId: getExternalAccount
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/external_account"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update external account
      tags:
      - ExternalAccount
      operationId: updateExternalAccount
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/external_account"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/external_account_update_request"
    delete:
      summary: delete external account
      tags:
      - ExternalAccount
      operationId: deleteExternalAccount
      security:
      - basic_auth: []
      responses:
        '204':
          description: successful
  "/api/incoming_payment_details":
    get:
      summary: list incoming payment_details
      tags:
      - IncomingPaymentDetail
      operationId: listIncomingPaymentDetails
      description: Get a list of Incoming Payment Details.
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: direction
        in: query
        schema:
          type: string
          enum:
          - credit
          - debit
        required: false
        description: One of `credit` or `debit`.
      - name: status
        in: query
        schema:
          type: string
          enum:
          - completed
          - pending
          - returned
        required: false
        description: The current status of the incoming payment order. One of `pending`,
          `completed`, or `returned`.
      - name: type
        in: query
        schema:
          type: string
          enum:
          - ach
          - book
          - check
          - eft
          - interac
          - rtp
          - sepa
          - signet
          - wire
        required: false
        description: 'One of: `ach`, `book`, `check`, `eft`, `interac`, `rtp`, `sepa`,
          `signet`, or `wire`.'
      - name: as_of_date_start
        in: query
        schema:
          type: string
          format: date
        required: false
        description: Filters incoming payment details with an as_of_date starting
          on or after the specified date (YYYY-MM-DD).
      - name: as_of_date_end
        in: query
        schema:
          type: string
          format: date
        required: false
        description: Filters incoming payment details with an as_of_date starting
          on or before the specified date (YYYY-MM-DD).
      - "$ref": "#/components/parameters/metadata_query"
      - name: virtual_account_id
        in: query
        required: false
        description: If the incoming payment detail is in a virtual account, the ID
          of the Virtual Account.
        schema:
          type: string
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/incoming_payment_detail"
        '401':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/incoming_payment_details/{id}":
    parameters:
    - name: id
      in: path
      description: The unique identifier of the incoming payment detail.
      required: true
      schema:
        type: string
    get:
      summary: get incoming payment detail
      tags:
      - IncomingPaymentDetail
      operationId: getIncomingPaymentDetail
      description: Get an existing Incoming Payment Detail.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/incoming_payment_detail"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update incoming payment detail
      tags:
      - IncomingPaymentDetail
      operationId: updateIncomingPaymentDetail
      description: Update an existing Incoming Payment Detail.
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/incoming_payment_detail"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/incoming_payment_detail_update_request"
  "/api/internal_accounts":
    get:
      summary: list internal accounts
      tags:
      - InternalAccount
      operationId: listInternalAccounts
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: currency
        in: query
        schema:
          type: string
          "$ref": "#/components/schemas/currency"
        required: false
        description: The currency associated with the internal account.
      - name: payment_type
        in: query
        schema:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
        required: false
        description: The type of payment that can be made by the internal account.
      - name: payment_direction
        in: query
        schema:
          type: string
          enum:
          - credit
          - debit
        required: false
        description: The direction of payments that can be made by internal account.
      - "$ref": "#/components/parameters/metadata_query"
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/internal_account"
    post:
      summary: create internal account
      tags:
      - InternalAccount
      operationId: createInternalAccount
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/internal_account"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/internal_account_create_request"
  "/api/internal_accounts/{id}":
    parameters:
    - name: id
      in: path
      description: Unique identifier for the account.
      required: true
      schema:
        type: string
    get:
      summary: get internal account
      tags:
      - InternalAccount
      operationId: getInternalAccount
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/internal_account"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update internal account
      tags:
      - InternalAccount
      operationId: updateInternalAccount
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/internal_account"
        '404':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/internal_account_update_request"
  "/api/ledger_account_categories":
    get:
      summary: list ledger_account_categories
      tags:
      - LedgerAccountCategory
      operationId: listLedgerAccountCategories
      description: Get a list of ledger account categories.
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        schema:
          type: integer
        required: false
      - "$ref": "#/components/parameters/metadata_query"
      - name: name
        in: query
        required: false
        schema:
          type: string
      - name: ledger_id
        in: query
        required: false
        schema:
          type: string
      - name: parent_ledger_account_category_id
        in: query
        required: false
        description: Query categories that are nested underneath a parent category
        schema:
          type: string
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              required: false
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ledger_account_category"
    post:
      summary: create ledger_account_category
      tags:
      - LedgerAccountCategory
      operationId: createLedgerAccountCategory
      description: Create a ledger account category.
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_account_category"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ledger_account_category_create_request"
  "/api/ledger_account_categories/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    - name: balances
      in: query
      schema:
        type: object
        properties:
          as_of_date:
            type: string
            format: date
          effective_at:
            type: string
            format: date-time
        additionalProperties: false
      style: deepObject
      required: false
      description: For example, if you want the balances as of a particular effective
        date (YYYY-MM-DD), the encoded query string would be balances%5Bas_of_date%5D=2000-12-31.
        The balances as of a date are inclusive of entries with that exact date.
    get:
      summary: get ledger_account_category
      tags:
      - LedgerAccountCategory
      operationId: getLedgerAccountCategory
      description: Get the details on a single ledger account category.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_account_category"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update ledger_account_category
      tags:
      - LedgerAccountCategory
      operationId: updateLedgerAccountCategory
      description: Update the details of a ledger account category.
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_account_category"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ledger_account_category_update_request"
    delete:
      summary: delete ledger_account_category
      tags:
      - LedgerAccountCategory
      operationId: deleteLedgerAccountCategory
      description: Delete a ledger account category.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_account_category"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/ledger_account_categories/{id}/ledger_accounts/{ledger_account_id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    - name: ledger_account_id
      in: path
      description: ledger_account_id
      required: true
      schema:
        type: string
    put:
      summary: add ledger_account_category to ledger_account
      tags:
      - LedgerAccountCategory
      operationId: addLedgerAccountCategoryToLedgerAccount
      description: Add a ledger account category to an account.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    delete:
      summary: delete ledger_account_category from ledger_account
      tags:
      - LedgerAccountCategory
      operationId: deleteLedgerAccountCategoryFromLedgerAccount
      description: Delete a ledger account category from an account.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/ledger_account_categories/{id}/ledger_account_categories/{sub_category_id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    - name: sub_category_id
      in: path
      description: sub_category_id
      required: true
      schema:
        type: string
    put:
      summary: add ledger_account_category to ledger_account_category
      tags:
      - LedgerAccountCategory
      operationId: addLedgerAccountCategoryToLedgerAccountCategory
      description: Add a ledger account category to a ledger account category.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    delete:
      summary: delete ledger_account_category from ledger_account_category
      tags:
      - LedgerAccountCategory
      operationId: deleteLedgerAccountCategoryFromLedgerAccountCategory
      description: Delete a ledger account category from a ledger account category.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/ledger_accounts":
    get:
      summary: list ledger_accounts
      tags:
      - LedgerAccount
      operationId: listLedgerAccounts
      description: Get a list of ledger accounts.
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        schema:
          type: integer
        required: false
      - "$ref": "#/components/parameters/metadata_query"
      - name: id
        in: query
        required: false
        schema:
          type: string
      - name: name
        in: query
        required: false
        schema:
          type: string
      - name: ledger_id
        in: query
        required: false
        schema:
          type: string
      - name: balances
        in: query
        schema:
          type: object
          properties:
            as_of_date:
              type: string
              format: date
            effective_at:
              type: string
              format: date-time
          additionalProperties: false
        style: deepObject
        required: false
        description: For example, if you want the balances as of a particular effective
          date (YYYY-MM-DD), the encoded query string would be balances%5Bas_of_date%5D=2000-12-31.
          The balances as of a date are inclusive of entries with that exact date.
      - name: updated_at
        in: query
        schema:
          type: object
          additionalProperties:
            type: string
            format: date-time
        style: deepObject
        required: false
        description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to
          filter by the posted at timestamp. For example, for all times after Jan
          1 2000 12:00 UTC, use updated_at%5Bgt%5D=2000-01-01T12:00:00Z.
      - name: ledger_account_category_id
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              required: false
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ledger_account"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    post:
      summary: create ledger_account
      tags:
      - LedgerAccount
      operationId: createLedgerAccount
      description: Create a ledger account.
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_account"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ledger_account_create_request"
  "/api/ledger_accounts/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: get ledger_account
      tags:
      - LedgerAccount
      operationId: getLedgerAccount
      description: Get details on a single ledger account.
      security:
      - basic_auth: []
      parameters:
      - name: balances
        in: query
        schema:
          type: object
          properties:
            as_of_date:
              type: string
              format: date
          additionalProperties: false
        style: deepObject
        required: false
        description: For example, if you want the balances as of a particular effective
          date (YYYY-MM-DD), the encoded query string would be balances%5Bas_of_date%5D=2000-12-31.
          The balances as of a date are inclusive of entries with that exact date.
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_account"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update ledger_account
      tags:
      - LedgerAccount
      operationId: updateLedgerAccount
      description: Update the details of a ledger account.
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_account"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ledger_account_update_request"
    delete:
      summary: delete ledger_account
      tags:
      - LedgerAccount
      operationId: deleteLedgerAccount
      description: Delete a ledger account.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_account"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/ledger_entries":
    get:
      summary: list ledger_entries
      tags:
      - LedgerEntry
      operationId: listLedgerEntries
      description: Get a list of all ledger entries.
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        schema:
          type: integer
        required: false
      - name: ledger_account_id
        in: query
        required: false
        schema:
          type: string
      - name: ledger_transaction_id
        in: query
        required: false
        schema:
          type: string
      - name: effective_date
        in: query
        schema:
          type: object
          additionalProperties:
            type: string
            format: date
        style: deepObject
        required: false
        description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to
          filter by the transaction's effective date. Format YYYY-MM-DD
      - name: effective_at
        in: query
        schema:
          type: object
          additionalProperties:
            type: string
            format: time
        style: deepObject
        required: false
        description: Use "gt" (>), "gte" (>=), "lt" (<), "lte" (<=), or "eq" (=) to
          filter by the transaction's effective time. Format ISO8601
      - name: updated_at
        in: query
        schema:
          type: object
          additionalProperties:
            type: string
            format: date-time
        style: deepObject
        required: false
        description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to
          filter by the posted at timestamp. For example, for all times after Jan
          1 2000 12:00 UTC, use updated_at%5Bgt%5D=2000-01-01T12:00:00Z.
      - name: ledger_account_lock_version
        in: query
        schema:
          type: object
          additionalProperties:
            type: integer
        style: deepObject
        required: false
        description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to
          filter by the lock_version of a ledger account. For example, for all entries
          created at or before before lock_version 1000 of a ledger account, use ledger_account_lock_version%5Blte%5D=1000
      - name: ledger_account_category_id
        in: query
        required: false
        description: Get all ledger entries that match the direction specified. One
          of `credit`, `debit`.
        schema:
          type: string
      - name: show_deleted
        in: query
        required: false
        description: If true, response will include ledger entries that were deleted.
          When you update a ledger transaction to specify a new set of entries, the
          previous entries are deleted.
        schema:
          type: boolean
      - name: direction
        in: query
        schema:
          type: string
          enum:
          - credit
          - debit
        required: false
        description: If true, response will include ledger entries that were deleted.
          When you update a ledger transaction to specify a new set of entries, the
          previous entries are deleted.
      - name: status
        in: query
        schema:
          type: string
          enum:
          - pending
          - posted
          - archived
        required: false
        description: Get all ledger entries that match the status specified. One of
          `pending`, `posted`, or `archived`.
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              required: false
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ledger_entry"
        '422':
          description: unsucessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/ledger_entries/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: get ledger_entry
      tags:
      - LedgerEntry
      operationId: getLedgerEntry
      description: Get details on a single ledger entry.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_entry"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/ledger_transactions":
    get:
      summary: list ledger_transactions
      tags:
      - LedgerTransaction
      operationId: listLedgerTransactions
      description: Get a list of ledger transactions.
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        schema:
          type: integer
        required: false
      - "$ref": "#/components/parameters/metadata_query"
      - name: ledger_id
        in: query
        required: false
        schema:
          type: string
      - name: ledger_account_id
        in: query
        required: false
        schema:
          type: string
      - name: effective_at
        in: query
        schema:
          type: object
          additionalProperties:
            type: string
            format: time
        style: deepObject
        required: false
        description: Use "gt" (>), "gte" (>=), "lt" (<), "lte" (<=), or "eq" (=) to
          filter by effective at. For example, for all transactions after Jan 1 2000,
          use effective_at%5Bgt%5D=2000-01-01T00:00:00:00.000Z.
      - name: effective_date
        in: query
        schema:
          type: object
          additionalProperties:
            type: string
            format: date-time
        style: deepObject
        required: false
        description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to
          filter by effective date. For example, for all dates after Jan 1 2000, use
          effective_date%5Bgt%5D=2000-01-01.
      - name: posted_at
        in: query
        schema:
          type: object
          additionalProperties:
            type: string
            format: date-time
        style: deepObject
        required: false
        description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to
          filter by the posted at timestamp. For example, for all times after Jan
          1 2000 12:00 UTC, use posted_at%5Bgt%5D=2000-01-01T12:00:00Z.
      - name: updated_at
        in: query
        schema:
          type: object
          additionalProperties:
            type: string
            format: date-time
        style: deepObject
        required: false
        description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to
          filter by the posted at timestamp. For example, for all times after Jan
          1 2000 12:00 UTC, use updated_at%5Bgt%5D=2000-01-01T12:00:00Z.
      - name: status
        in: query
        schema:
          type: string
          enum:
          - pending
          - posted
          - archived
        required: false
      - name: external_id
        in: query
        required: false
        schema:
          type: string
      - name: ledger_account_category_id
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              required: false
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ledger_transaction"
    post:
      summary: create ledger_transaction
      tags:
      - LedgerTransaction
      operationId: createLedgerTransaction
      description: Create a ledger transaction.
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_transaction"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ledger_transaction_create_request"
  "/api/ledger_transactions/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: get ledger_transaction
      tags:
      - LedgerTransaction
      operationId: getLedgerTransaction
      description: Get details on a single ledger transaction.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_transaction"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update ledger_transaction
      tags:
      - LedgerTransaction
      operationId: updateLedgerTransaction
      description: Update the details of a ledger transaction.
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger_transaction"
        '400':
          description: parameter_invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ledger_transaction_update_request"
  "/api/ledger_transactions/{id}/versions":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: list ledger_transaction versions
      tags:
      - LedgerTransaction
      operationId: listLedgerTransactionVersions
      description: Get a list of ledger transaction versions.
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        schema:
          type: integer
        required: false
      - name: created_at
        in: query
        schema:
          type: object
          additionalProperties:
            type: string
            format: date-time
        style: deepObject
        required: false
        description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to
          filter by the created_at timestamp. For example, for all dates after Jan
          1 2000 12:00 UTC, use created_at%5Bgt%5D=2000-01-01T12:00:00Z.
      - name: version
        in: query
        schema:
          type: object
          additionalProperties:
            type: integer
        style: deepObject
        required: false
        description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to
          filter by the version. For example, for all versions after 2, use version%5Bgt%5D=2.
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              required: false
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ledger_transaction_version"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/ledgers":
    get:
      summary: list ledgers
      tags:
      - Ledger
      operationId: listLedgers
      description: Get a list of ledgers.
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        schema:
          type: integer
        required: false
      - "$ref": "#/components/parameters/metadata_query"
      - name: updated_at
        in: query
        schema:
          type: object
          additionalProperties:
            type: string
            format: date-time
        style: deepObject
        required: false
        description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=) to
          filter by the posted at timestamp. For example, for all times after Jan
          1 2000 12:00 UTC, use updated_at%5Bgt%5D=2000-01-01T12:00:00Z.
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              required: false
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ledger"
    post:
      summary: create ledger
      tags:
      - Ledger
      operationId: createLedger
      description: Create a ledger.
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ledger_create_request"
  "/api/ledgers/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: get ledger
      tags:
      - Ledger
      operationId: getLedger
      description: Get details on a single ledger.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update ledger
      tags:
      - Ledger
      operationId: updateLedger
      description: Update the details of a ledger.
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ledger_update_request"
    delete:
      summary: delete ledger
      tags:
      - Ledger
      operationId: deleteLedger
      description: Delete a ledger.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ledger"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/{itemizable_type}/{itemizable_id}/line_items":
    get:
      summary: list line items
      tags:
      - LineItem
      description: Get a list of line items
      operationId: listLineItems
      security:
      - basic_auth: []
      parameters:
      - name: itemizable_id
        in: path
        schema:
          type: string
        description: The ID of the payment order or expected payment.
        required: true
      - name: itemizable_type
        in: path
        schema:
          type: string
          enum:
          - expected_payments
          - payment_orders
        description: One of `payment_orders` or `expected_payments`.
        required: true
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        schema:
          type: integer
        required: false
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/line_item"
  "/api/{itemizable_type}/{itemizable_id}/line_items/{id}":
    get:
      summary: get line item
      tags:
      - LineItem
      description: Get a single line item
      operationId: getLineItem
      security:
      - basic_auth: []
      parameters:
      - name: itemizable_id
        in: path
        schema:
          type: string
        description: The ID of the payment order or expected payment.
        required: true
      - name: itemizable_type
        in: path
        schema:
          type: string
          enum:
          - expected_payments
          - payment_orders
        description: One of `payment_orders` or `expected_payments`.
        required: true
      - name: id
        in: path
        schema:
          type: string
        description: The ID of the line item.
        required: true
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/line_item"
    patch:
      summary: update line item
      tags:
      - LineItem
      operationId: updateLineItem
      security:
      - basic_auth: []
      parameters:
      - name: itemizable_id
        in: path
        schema:
          type: string
        description: The ID of the payment order or expected payment.
        required: true
      - name: itemizable_type
        in: path
        schema:
          type: string
          enum:
          - expected_payments
          - payment_orders
        description: One of `payment_orders` or `expected_payments`.
        required: true
      - name: id
        in: path
        schema:
          type: string
        description: The ID of the line item.
        required: true
      responses:
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/line_item"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/line_item_update_request"
  "/api/paper_items":
    get:
      summary: list paper items
      tags:
      - PaperItem
      description: Get a list of all paper items.
      operationId: listPaperItems
      security:
      - basic_auth: []
      parameters:
      - name: lockbox_number
        in: query
        schema:
          type: string
        description: Specify `lockbox_number` if you wish to see paper items that
          are associated with a specific lockbox number.
        required: false
      - name: deposit_date_start
        in: query
        schema:
          type: string
          format: date
        required: false
        description: Specify an inclusive start date (YYYY-MM-DD) when filtering by
          deposit_date
      - name: deposit_date_end
        in: query
        schema:
          type: string
          format: date
        required: false
        description: Specify an inclusive end date (YYYY-MM-DD) when filtering by
          deposit_date
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/paper_item"
  "/api/paper_items/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: get paper item
      tags:
      - PaperItem
      description: Get details on a single paper item.
      operationId: getPaperItem
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/paper_item"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/payment_orders/create_async":
    post:
      summary: create async payment order
      tags:
      - PaymentOrder
      description: Create a new payment order asynchronously
      operationId: createAsyncPaymentOrder
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '202':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/async_response"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/payment_order_async_create_request"
  "/api/payment_orders":
    get:
      summary: list payment orders
      tags:
      - PaymentOrder
      description: Get a list of all payment orders
      operationId: listPaymentOrders
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        schema:
          type: integer
        required: false
      - name: type
        in: query
        schema:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
        required: false
      - name: priority
        in: query
        schema:
          type: string
          enum:
          - high
          - normal
        required: false
        description: Either `normal` or `high`. For ACH and EFT payments, `high` represents
          a same-day ACH or EFT transfer, respectively. For check payments, `high`
          can mean an overnight check rather than standard mail.
      - name: counterparty_id
        in: query
        schema:
          type: string
          format: uuid
        required: false
      - name: originating_account_id
        in: query
        schema:
          type: string
          format: uuid
        required: false
      - name: transaction_id
        in: query
        schema:
          type: string
          format: uuid
        description: The ID of a transaction that the payment order has been reconciled
          to.
        required: false
      - name: status
        in: query
        schema:
          type: string
          enum:
          - approved
          - cancelled
          - completed
          - denied
          - failed
          - needs_approval
          - pending
          - processing
          - returned
          - reversed
          - sent
        required: false
      - name: direction
        in: query
        schema:
          type: string
          enum:
          - credit
          - debit
        required: false
      - name: reference_number
        in: query
        schema:
          type: string
        description: Query for records with the provided reference number
        required: false
      - name: effective_date_start
        in: query
        schema:
          type: string
          format: date
        required: false
        description: An inclusive lower bound for searching effective_date
      - name: effective_date_end
        in: query
        schema:
          type: string
          format: date
        required: false
        description: An inclusive upper bound for searching effective_date
      - "$ref": "#/components/parameters/metadata_query"
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              required: false
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/payment_order"
    post:
      summary: create payment order
      tags:
      - PaymentOrder
      description: Create a new Payment Order
      operationId: createPaymentOrder
      security:
      - basic_auth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
          enum:
          - application/json
          - multipart/form-data
        required: false
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '401':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '400':
          description: parameter_invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/payment_order"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/payment_order_create_request"
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/payment_order_create_request"
  "/api/payment_orders/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: get payment order
      tags:
      - PaymentOrder
      description: Get details on a single payment order
      operationId: getPaymentOrder
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/payment_order"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update payment order
      tags:
      - PaymentOrder
      description: Update a payment order
      operationId: updatePaymentOrder
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/payment_order"
        '422':
          description: parameter_invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/payment_order_update_request"
  "/api/ping":
    get:
      summary: ping api
      tags:
      - Ping
      operationId: pingAPI
      security:
      - basic_auth: []
      description: A test endpoint often used to confirm credentials and headers are
        being passed in correctly.
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ping_response"
        '500':
          description: internal server error
        '401':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '429':
          description: unsuccessful
  "/api/returns":
    get:
      summary: list returns
      tags:
      - Return
      operationId: listReturns
      description: Get a list of returns.
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: internal_account_id
        in: query
        required: false
        description: Specify `internal_account_id` if you wish to see returns to/from
          a specific account.
        schema:
          type: string
      - name: counterparty_id
        in: query
        required: false
        description: Specify `counterparty_id` if you wish to see returns that occurred
          with a specific counterparty.
        schema:
          type: string
      - name: returnable_id
        in: query
        required: false
        description: The ID of a valid returnable. Must be accompanied by `returnable_type`.
        schema:
          type: string
      - name: returnable_type
        in: query
        schema:
          type: string
          enum:
          - incoming_payment_detail
          - paper_item
          - payment_order
          - reversal
        required: false
        description: One of `payment_order`, `paper_item`, `reversal`, or `incoming_payment_detail`.
          Must be accompanied by `returnable_id`.
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/return"
        '401':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    post:
      summary: create return
      tags:
      - Return
      operationId: createReturn
      description: Create a return.
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/return"
        '404':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/return_create_request"
  "/api/returns/{id}":
    parameters:
    - name: id
      in: path
      description: The ID of an existing return.
      required: true
      schema:
        type: string
    get:
      summary: show return
      tags:
      - Return
      operationId: getReturn
      description: Get a single return.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/return"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/payment_orders/{payment_order_id}/reversals":
    get:
      summary: list reversals
      tags:
      - Reversal
      description: Get a list of all reversals of a payment order.
      operationId: listReversals
      security:
      - basic_auth: []
      parameters:
      - name: payment_order_id
        in: path
        schema:
          type: string
        description: The ID of the relevant Payment Order.
        required: true
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/reversal"
    post:
      summary: create reversal
      tags:
      - Reversal
      description: Create a reversal for a payment order.
      operationId: createReversal
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      - name: payment_order_id
        in: path
        schema:
          type: string
          format: uuid
          description: The id of the payment order being reversed.
        description: The ID of the relevant Payment Order.
        required: true
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/reversal"
        '404':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/reversal_create_request"
  "/api/payment_orders/{payment_order_id}/reversals/{reversal_id}":
    parameters:
    - name: payment_order_id
      in: path
      schema:
        type: string
        format: uuid
      description: The id of the payment order being reversed.
      required: true
    - name: reversal_id
      in: path
      schema:
        type: string
        format: uuid
      description: The ID of the reversal.
      required: true
    get:
      summary: show reversal
      tags:
      - Reversal
      description: Get details on a single reversal of a payment order.
      operationId: getReversal
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/reversal"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/{accounts_type}/{account_id}/routing_details":
    get:
      summary: list routing_details
      tags:
      - RoutingDetail
      description: Get a list of routing details for a single internal or external
        account.
      operationId: listRoutingDetails
      security:
      - basic_auth: []
      parameters:
      - name: accounts_type
        in: path
        schema:
          type: string
          enum:
          - external_accounts
          - internal_accounts
        required: true
      - name: account_id
        in: path
        description: The ID of the account.
        required: true
        schema:
          type: string
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/routing_detail"
    post:
      summary: create routing_detail
      tags:
      - RoutingDetail
      description: Create a routing detail for a single external account.
      operationId: createRoutingDetail
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      - name: accounts_type
        in: path
        schema:
          type: string
          enum:
          - external_accounts
        required: true
      - name: account_id
        in: path
        description: The ID of the account.
        required: true
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/routing_detail"
        '404':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/routing_detail_create_request"
  "/api/{accounts_type}/{account_id}/routing_details/{id}":
    get:
      summary: get routing_detail
      tags:
      - RoutingDetail
      description: Get a single routing detail for a single internal or external account.
      operationId: getRoutingDetail
      security:
      - basic_auth: []
      parameters:
      - name: accounts_type
        in: path
        schema:
          type: string
          enum:
          - external_accounts
          - internal_accounts
        required: true
      - name: account_id
        in: path
        description: The ID of the account.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the routing detail.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/routing_detail"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    delete:
      summary: delete routing_detail
      tags:
      - RoutingDetail
      description: Delete a routing detail for a single external account.
      operationId: deleteRoutingDetail
      security:
      - basic_auth: []
      parameters:
      - name: accounts_type
        in: path
        schema:
          type: string
          enum:
          - external_accounts
        required: true
      - name: account_id
        in: path
        description: The ID of the account.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the routing detail.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: successful
  "/api/simulations/incoming_payment_details/create_async":
    post:
      summary: create async incoming payment detail
      tags:
      - IncomingPaymentDetail
      operationId: createAsyncIncomingPaymentDetail
      description: Simulate Incoming Payment Detail
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '202':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/async_response"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '405':
          description: not allowed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/incoming_payment_detail_create_request"
  "/api/transactions":
    get:
      summary: list transactions
      tags:
      - Transaction
      operationId: listTransactions
      description: Get a list of all transactions.
      security:
      - basic_auth: []
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: internal_account_id
        in: query
        schema:
          type: string
          format: uuid
        required: false
        description: Specify `internal_account_id` if you wish to see transactions
          to/from a specific account.
      - name: virtual_account_id
        in: query
        schema:
          type: string
          format: uuid
        required: false
      - name: posted
        in: query
        required: false
        description: Either `true` or `false`.
        schema:
          type: boolean
      - name: as_of_date_start
        in: query
        schema:
          type: string
          format: date
        required: false
        description: Filters transactions with an `as_of_date` starting on or after
          the specified date (YYYY-MM-DD).
      - name: as_of_date_end
        in: query
        schema:
          type: string
          format: date
        required: false
        description: Filters transactions with an `as_of_date` starting on or before
          the specified date (YYYY-MM-DD).
      - name: direction
        in: query
        required: false
        schema:
          type: string
      - name: counterparty_id
        in: query
        schema:
          type: string
          format: uuid
        required: false
      - name: payment_type
        in: query
        required: false
        schema:
          type: string
      - name: transactable_type
        in: query
        required: false
        schema:
          type: string
      - name: description
        in: query
        required: false
        description: Filters for transactions including the queried string in the
          description.
        schema:
          type: string
      - "$ref": "#/components/parameters/metadata_query"
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/transaction"
  "/api/transactions/{id}":
    parameters:
    - name: id
      in: path
      required: true
      description: Transaction ID
      schema:
        type: string
    get:
      summary: get transaction
      tags:
      - Transaction
      operationId: getTransaction
      description: Get details on a single transaction.
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/transaction"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update transaction
      tags:
      - Transaction
      operationId: updateTransaction
      description: Update a single transaction.
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/transaction"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/transaction_update_request"
  "/api/validations/routing_numbers":
    get:
      summary: validate routing numbers
      tags:
      - Validation
      operationId: validateRoutingNumber
      description: Validates the routing number information supplied without creating
        a routing detail
      security:
      - basic_auth: []
      parameters:
      - name: routing_number
        in: query
        required: true
        description: The routing number that is being validated.
        schema:
          type: string
      - name: routing_number_type
        in: query
        schema:
          type: string
          enum:
          - aba
          - au_bsb
          - br_codigo
          - ca_cpa
          - cnaps
          - gb_sort_code
          - in_ifsc
          - my_branch_code
          - swift
        required: true
        description: One of `aba`, `au_bsb`, `br_codigo`, `ca_cpa`, `cnaps`, `gb_sort_code`,
          `in_ifsc`, `my_branch_code`, or `swift`. In sandbox mode we currently only
          support `aba` and `swift` with routing numbers '123456789' and 'GRINUST0XXX'
          respectively.
      responses:
        '200':
          description: successful valid routing number and type
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/routing_number_lookup_request"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful with invalid parameter
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
  "/api/virtual_accounts":
    get:
      summary: list virtual_accounts
      tags:
      - VirtualAccount
      operationId: listVirtualAccounts
      security:
      - basic_auth: []
      description: Get a list of virtual accounts.
      parameters:
      - name: after_cursor
        in: query
        schema:
          type: string
          nullable: true
        required: false
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: internal_account_id
        in: query
        schema:
          type: string
          format: uuid
        required: false
      - name: counterparty_id
        in: query
        schema:
          type: string
          format: uuid
        required: false
      - "$ref": "#/components/parameters/metadata_query"
      responses:
        '200':
          description: successful
          headers:
            X-After-Cursor:
              schema:
                type: string
                nullable: true
              description: The cursor for the next page. Including this in a call
                as `after_cursor` will return the next page.
            X-Per-Page:
              schema:
                type: integer
                nullable: true
              description: The current `per_page`.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/virtual_account"
        '401':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    post:
      summary: create virtual_account
      tags:
      - VirtualAccount
      operationId: createVirtualAccount
      security:
      - basic_auth: []
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        description: This key should be something unique, preferably something like
          an UUID.
        schema:
          type: string
      responses:
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '422':
          description: unsuccessful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
        '201':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/virtual_account"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/virtual_account_create_request"
  "/api/virtual_accounts/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: get virtual_account
      tags:
      - VirtualAccount
      operationId: getVirtualAccount
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_message"
    patch:
      summary: update virtual_account
      tags:
      - VirtualAccount
      operationId: updateVirtualAccount
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/virtual_account"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/virtual_account_update_request"
    delete:
      summary: delete virtual_account
      tags:
      - VirtualAccount
      operationId: deleteVirtualAccount
      security:
      - basic_auth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/virtual_account"
servers:
- url: http://localhost:3000
- url: app.moderntreasury.com
components:
  securitySchemes:
    basic_auth:
      type: http
      scheme: basic
  parameters:
    metadata_query:
      name: metadata
      in: query
      schema:
        type: object
        additionalProperties:
          type: string
      style: deepObject
      explode: true
      required: false
      description: For example, if you want to query for records with metadata key
        `Type` and value `Loan`, the query would be `metadata%5BType%5D=Loan`. This
        encodes the query parameters.
  schemas:
    accounting:
      type: object
      properties:
        account_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of one of your accounting categories. Note that these
            will only be accessible if your accounting system has been connected.
        class_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of one of the class objects in your accounting system.
            Class objects track segments of your business independent of client or
            project. Note that these will only be accessible if your accounting system
            has been connected.
    account_detail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        account_number:
          type: string
          description: The account number for the bank account.
        account_number_type:
          type: string
          enum:
          - clabe
          - iban
          - other
          - pan
          - wallet_address
          description: One of `iban`, `clabe`, `wallet_address`, or `other`. Use `other`
            if the bank account number is in a generic format.
        account_number_safe:
          type: string
          description: The last 4 digits of the account_number.
      additionalProperties: false
      minProperties: 9
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - account_number
      - account_number_type
      - account_number_safe
    account_detail_create_request:
      type: object
      properties:
        account_number:
          type: string
          description: The account number for the bank account.
        account_number_type:
          type: string
          enum:
          - clabe
          - iban
          - other
          - pan
          - wallet_address
          description: One of `iban`, `clabe`, `wallet_address`, or `other`. Use `other`
            if the bank account number is in a generic format.
      required:
      - account_number
    address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        line1:
          type: string
          nullable: true
        line2:
          type: string
          nullable: true
        locality:
          type: string
          nullable: true
          description: Locality or City.
        region:
          type: string
          nullable: true
          description: Region or State.
        postal_code:
          type: string
          description: The postal code of the address.
          nullable: true
        country:
          type: string
          description: Country code conforms to [ISO 3166-1 alpha-2]
          nullable: true
      nullable: true
      additionalProperties: false
      minProperties: 11
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - line1
      - line2
      - locality
      - region
      - postal_code
      - country
    address_request:
      type: object
      properties:
        line1:
          type: string
          nullable: true
        line2:
          type: string
          nullable: true
        locality:
          type: string
          nullable: true
          description: Locality or City.
        region:
          type: string
          nullable: true
          description: Region or State.
        postal_code:
          type: string
          description: The postal code of the address.
          nullable: true
        country:
          type: string
          description: Country code conforms to [ISO 3166-1 alpha-2]
          nullable: true
    async_response:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
      additionalProperties: false
      minProperties: 2
      required:
      - id
      - object
    balance_report:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        balance_report_type:
          type: string
          enum:
          - intraday
          - other
          - previous_day
          - real_time
          description: The specific type of balance report. One of `intraday`, `previous_day`,
            `real_time`, or `other`.
        as_of_date:
          type: string
          format: date
          description: The date of the balance report in local time.
        as_of_time:
          type: string
          nullable: true
          format: time
          description: The time (24-hour clock) of the balance report in local time.
        balances:
          type: array
          description: An array of `Balance` objects.
          items:
            "$ref": "#/components/schemas/balance"
        internal_account_id:
          type: string
          format: uuid
          description: The ID of one of your organization's Internal Accounts.
      additionalProperties: false
      minProperties: 10
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - balance_report_type
      - as_of_date
      - as_of_time
      - balances
      - internal_account_id
    balance:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        amount:
          type: integer
          description: The balance amount.
        currency:
          "$ref": "#/components/schemas/currency"
          description: The currency of the balance.
        balance_type:
          type: string
          enum:
          - closing_available
          - closing_ledger
          - current_available
          - current_ledger
          - opening_available
          - opening_available_next_business_day
          - opening_ledger
          - other
          description: The specific type of balance reported. One of `opening_ledger`,
            `closing_ledger`, `current_ledger`, `opening_available`, `opening_available_next_business_day`,
            `closing_available`, `current_available`, or `other`.
        vendor_code:
          type: string
          description: The code used by the bank when reporting this specific balance.
        vendor_code_type:
          type: string
          enum:
          - bai2
          - bankprov
          - bnk_dev
          - cleartouch
          - cross_river
          - currencycloud
          - dc_bank
          - dwolla
          - evolve
          - goldman_sachs
          - iso20022
          - jpmc
          - mx
          - signet
          - silvergate
          - swift
          - us_bank
          nullable: true
          description: The code used by the bank when reporting this specific balance.
      additionalProperties: false
      minProperties: 10
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - amount
      - currency
      - balance_type
      - vendor_code
      - vendor_code_type
    connection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        vendor_id:
          type: string
          format: uuid
          description: Unique identifier for the bank or vendor.
        vendor_customer_id:
          type: string
          format: uuid
          description: An identifier given to this connection by the bank.
          nullable: true
        vendor_name:
          type: string
          description: A human-friendly name for the bank or vendor.
      additionalProperties: false
      minProperties: 9
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - vendor_id
      - vendor_customer_id
      - vendor_name
    contact_detail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        contact_identifier:
          type: string
        contact_identifier_type:
          type: string
          enum:
          - email
          - phone_number
          - website
      additionalProperties: false
      minProperties: 8
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - contact_identifier
      - contact_identifier_type
    contact_detail_create_request:
      type: object
      properties:
        contact_identifier:
          type: string
        contact_identifier_type:
          type: string
          enum:
          - email
          - phone_number
          - website
    counterparty:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          description: A human friendly name for this counterparty.
          nullable: true
        accounts:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              object:
                type: string
              live_mode:
                type: boolean
                description: This field will be true if this object exists in the
                  live environment or false if it exists in the test environment.
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
              discarded_at:
                type: string
                format: date-time
                nullable: true
              account_type:
                type: string
                enum:
                - cash
                - checking
                - loan
                - non_resident
                - other
                - overdraft
                - savings
                description: Can be `checking`, `savings` or `other`.
              party_type:
                type: string
                enum:
                - business
                - individual
                nullable: true
                description: Either `individual` or `business`.
              party_address:
                "$ref": "#/components/schemas/address"
                description: The address associated with the owner or `null`.
              name:
                type: string
                nullable: true
                description: A nickname for the external account. This is only for
                  internal usage and won't affect any payments
              account_details:
                type: array
                items:
                  "$ref": "#/components/schemas/account_detail"
              routing_details:
                type: array
                items:
                  "$ref": "#/components/schemas/routing_detail"
              metadata:
                type: object
                additionalProperties:
                  type: string
                example:
                  key: value
                  foo: bar
                  modern: treasury
                description: Additional data represented as key-value pairs. Both
                  the key and value must be strings.
              party_name:
                type: string
                description: The legal name of the entity which owns the account.
              contact_details:
                type: array
                items:
                  "$ref": "#/components/schemas/contact_detail"
              verification_status:
                type: string
                enum:
                - pending_verification
                - unverified
                - verified
            additionalProperties: false
            minProperties: 16
          description: The accounts for this counterparty.
        email:
          type: string
          format: email
          description: The counterparty's email.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
        send_remittance_advice:
          type: boolean
          description: Send an email to the counterparty whenever an associated payment
            order is sent to the bank.
      additionalProperties: false
      minProperties: 11
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - name
      - accounts
      - email
      - metadata
      - send_remittance_advice
    counterparty_collect_account_request:
      type: object
      properties:
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of `credit` or `debit`. Use `credit` when you want to pay
            a counterparty. Use `debit` when you need to charge a counterparty. This
            field helps us send a more tailored email to your counterparties."
        send_email:
          type: boolean
          description: By default, Modern Treasury will send an email to your counterparty
            that includes a link to the form they must fill out. However, if you would
            like to send the counterparty the link, you can set this parameter to
            `false`. The JSON body will include the link to the secure Modern Treasury
            form.
        fields:
          type: array
          items:
            type: string
            enum:
            - name
            - nameOnAccount
            - taxpayerIdentifier
            - accountType
            - accountNumber
            - ibanNumber
            - clabeNumber
            - walletAddress
            - panNumber
            - routingNumber
            - abaWireRoutingNumber
            - swiftCode
            - auBsb
            - caCpa
            - cnaps
            - gbSortCode
            - inIfsc
            - myBranchCode
            - brCodigo
            - routingNumberType
            - address
          description: The list of fields you want on the form. This field is optional
            and if it is not set, will default to [\"nameOnAccount\", \"accountType\",
            \"accountNumber\", \"routingNumber\", \"address\"]. The full list of options
            is [\"name\", \"nameOnAccount\", \"taxpayerIdentifier\", \"accountType\",
            \"accountNumber\", \"routingNumber\", \"address\", \"ibanNumber\", \"swiftCode\"].
        custom_redirect:
          type: string
          format: uri
          description: The URL you want your customer to visit upon filling out the
            form. By default, they will be sent to a Modern Treasury landing page.
            This must be a valid HTTPS URL if set.
      required:
      - direction
    counterparty_collect_account_response:
      type: object
      properties:
        id:
          type: string
          description: The id of the existing counterparty.
        is_resend:
          type: boolean
          description: This field will be `true` if an email requesting account details
            has already been sent to this counterparty.
        form_link:
          type: string
          format: uri
          description: This is the link to the secure Modern Treasury form. By default,
            Modern Treasury will send an email to your counterparty that includes
            a link to this form. However, if `send_email` is passed as `false` in
            the body then Modern Treasury will not send the email and you can send
            it to the counterparty directly.
      additionalProperties: false
      minProperties: 3
      required:
      - id
      - is_resend
      - form_link
    counterparty_create_request:
      type: object
      properties:
        name:
          type: string
          description: A human friendly name for this counterparty.
          nullable: true
        accounts:
          type: array
          items:
            type: object
            properties:
              account_type:
                type: string
                enum:
                - cash
                - checking
                - loan
                - non_resident
                - other
                - overdraft
                - savings
                description: Can be `checking`, `savings` or `other`.
              party_type:
                type: string
                enum:
                - business
                - individual
                nullable: true
                description: Either `individual` or `business`.
              party_address:
                "$ref": "#/components/schemas/address_request"
                description: Required if receiving wire payments.
              name:
                type: string
                nullable: true
                description: A nickname for the external account. This is only for
                  internal usage and won't affect any payments
              account_details:
                type: array
                items:
                  type: object
                  properties:
                    account_number:
                      type: string
                    account_number_type:
                      type: string
                      enum:
                      - iban
                      - clabe
                      - wallet_address
                      - pan
                      - other
                  required:
                  - account_number
              routing_details:
                type: array
                items:
                  type: object
                  properties:
                    routing_number:
                      type: string
                    routing_number_type:
                      type: string
                      enum:
                      - aba
                      - swift
                      - au_bsb
                      - ca_cpa
                      - cnaps
                      - gb_sort_code
                      - in_ifsc
                      - my_branch_code
                      - br_codigo
                    payment_type:
                      type: string
                      enum:
                      - ach
                      - au_becs
                      - bacs
                      - book
                      - card
                      - check
                      - eft
                      - cross_border
                      - interac
                      - masav
                      - neft
                      - provxchange
                      - rtp
                      - sen
                      - sepa
                      - signet
                      - wire
                  required:
                  - routing_number
                  - routing_number_type
              metadata:
                type: object
                additionalProperties:
                  type: string
                example:
                  key: value
                  foo: bar
                  modern: treasury
                description: Additional data represented as key-value pairs. Both
                  the key and value must be strings.
              party_name:
                type: string
                description: If this value isn't provided, it will be inherited from
                  the counterparty's name.
              party_identifier:
                type: string
              plaid_processor_token:
                type: string
                description: If you've enabled the Modern Treasury + Plaid integration
                  in your Plaid account, you can pass the processor token in this
                  field.
              contact_details:
                type: array
                items:
                  "$ref": "#/components/schemas/contact_detail_create_request"
          description: The accounts for this counterparty.
        email:
          type: string
          format: email
          description: The counterparty's email.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
        send_remittance_advice:
          type: boolean
          description: Send an email to the counterparty whenever an associated payment
            order is sent to the bank.
        accounting:
          type: object
          properties:
            type:
              type: string
              enum:
              - customer
              - vendor
              description: An optional type to auto-sync the counterparty to your
                ledger. Either `customer` or `vendor`.
        ledger_type:
          type: string
          enum:
          - customer
          - vendor
          description: An optional type to auto-sync the counterparty to your ledger.
            Either `customer` or `vendor`.
          deprecated: true
        taxpayer_identifier:
          type: string
          description: Either a valid SSN or EIN.
      required:
      - name
    counterparty_update_request:
      type: object
      properties:
        name:
          type: string
          description: A new name for the counterparty. Will only update if passed.
        email:
          type: string
          format: email
          description: A new email for the counterparty.
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Additional data in the form of key-value pairs. Pairs can be
            removed by passing an empty string or `null` as the value.
        send_remittance_advice:
          type: boolean
          description: If this is `true`, Modern Treasury will send an email to the
            counterparty whenever an associated payment order is sent to the bank.
        taxpayer_identifier:
          type: string
          description: Either a valid SSN or EIN.
    currency:
      type: string
      enum:
      - AED
      - AFN
      - ALL
      - AMD
      - ANG
      - AOA
      - ARS
      - AUD
      - AWG
      - AZN
      - BAM
      - BBD
      - BCH
      - BDT
      - BGN
      - BHD
      - BIF
      - BMD
      - BND
      - BOB
      - BRL
      - BSD
      - BTC
      - BTN
      - BWP
      - BYN
      - BYR
      - BZD
      - CAD
      - CDF
      - CHF
      - CLF
      - CLP
      - CNH
      - CNY
      - COP
      - CRC
      - CUC
      - CUP
      - CVE
      - CZK
      - DJF
      - DKK
      - DOP
      - DZD
      - EEK
      - EGP
      - ERN
      - ETB
      - EUR
      - FJD
      - FKP
      - GBP
      - GBX
      - GEL
      - GGP
      - GHS
      - GIP
      - GMD
      - GNF
      - GTQ
      - GYD
      - HKD
      - HNL
      - HRK
      - HTG
      - HUF
      - IDR
      - ILS
      - IMP
      - INR
      - IQD
      - IRR
      - ISK
      - JEP
      - JMD
      - JOD
      - JPY
      - KES
      - KGS
      - KHR
      - KMF
      - KPW
      - KRW
      - KWD
      - KYD
      - KZT
      - LAK
      - LBP
      - LKR
      - LRD
      - LSL
      - LTL
      - LVL
      - LYD
      - MAD
      - MDL
      - MGA
      - MKD
      - MMK
      - MNT
      - MOP
      - MRO
      - MRU
      - MTL
      - MUR
      - MVR
      - MWK
      - MXN
      - MYR
      - MZN
      - NAD
      - NGN
      - NIO
      - NOK
      - NPR
      - NZD
      - OMR
      - PAB
      - PEN
      - PGK
      - PHP
      - PKR
      - PLN
      - PYG
      - QAR
      - RON
      - RSD
      - RUB
      - RWF
      - SAR
      - SBD
      - SCR
      - SDG
      - SEK
      - SGD
      - SHP
      - SKK
      - SLL
      - SOS
      - SRD
      - SSP
      - STD
      - SVC
      - SYP
      - SZL
      - THB
      - TJS
      - TMM
      - TMT
      - TND
      - TOP
      - TRY
      - TTD
      - TWD
      - TZS
      - UAH
      - UGX
      - USD
      - UYU
      - UZS
      - VEF
      - VES
      - VND
      - VUV
      - WST
      - XAF
      - XAG
      - XAU
      - XBA
      - XBB
      - XBC
      - XBD
      - XCD
      - XDR
      - XFU
      - XOF
      - XPD
      - XPF
      - XPT
      - XTS
      - YER
      - ZAR
      - ZMK
      - ZMW
      - ZWD
      - ZWL
      - ZWN
      - ZWR
      description: Three-letter ISO currency code.
    document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        document_type:
          type: string
          description: A category given to the document, can be `null`.
          nullable: true
        documentable_id:
          type: string
          format: uuid
          description: The unique identifier for the associated object.
        documentable_type:
          type: string
          enum:
          - case
          - counterparty
          - expected_payment
          - external_account
          - internal_account
          - organization
          - paper_item
          - payment_order
          - transaction
          description: The type of the associated object. Currently can be one of
            `payment_order`, `transaction`, `paper_item`, `expected_payment`, `counterparty`,
            `organization`, `case`, `internal_account` or `external_account`.
        file:
          type: object
          properties:
            size:
              type: integer
              description: The size of the document in bytes.
            filename:
              type: string
              description: The original filename of the document.
            content_type:
              type: string
              description: The MIME content type of the document.
          additionalProperties: false
          minProperties: 3
      additionalProperties: false
      minProperties: 10
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - document_type
      - documentable_id
      - documentable_type
      - file
    document_create_request:
      type: object
      properties:
        document_type:
          type: string
          description: A category given to the document, can be `null`.
        file:
          type: string
          format: binary
      required:
      - file
    error_message:
      type: object
      properties:
        errors:
          type: object
          properties:
            code:
              type: string
              enum:
              - parameter_invalid
              - parameter_missing
              - resource_not_found
              - not_found
              - forbidden
              - invalid_ip
              - invalid_key
              - header_invalid
              - expired_key
            message:
              type: string
            parameter:
              type: string
      required:
      - errors
    event:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        resource:
          type: string
          description: The type of resource for the event.
        event_name:
          type: string
          description: The name of the event.
        event_time:
          type: string
          format: date-time
          description: The time of the event.
        data:
          type: object
          description: The body of the event.
        entity_id:
          type: string
          description: The ID of the entity for the event.
      additionalProperties: false
      minProperties: 10
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - resource
      - event_name
      - event_time
      - data
      - entity_id
    expected_payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        amount_upper_bound:
          type: integer
          description: The highest amount this expected payment may be equal to. Value
            in specified currency's smallest unit. e.g. $10 would be represented as
            1000.
        amount_lower_bound:
          type: integer
          description: The lowest amount this expected payment may be equal to. Value
            in specified currency's smallest unit. e.g. $10 would be represented as
            1000.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of credit or debit. When you are receiving money, use credit.
            When you are being charged, use debit.
        internal_account_id:
          type: string
          format: uuid
          description: The ID of the Internal Account for the expected payment.
        type:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          nullable: true
          description: 'One of: ach, au_becs, bacs, book, check, eft, interac, provxchange,
            rtp, sen, sepa, signet, wire.'
        currency:
          "$ref": "#/components/schemas/currency"
          description: Must conform to ISO 4217. Defaults to the currency of the internal
            account.
        date_upper_bound:
          type: string
          format: date
          nullable: true
          description: 'The latest date the payment may come in. Format: yyyy-mm-dd'
        date_lower_bound:
          type: string
          format: date
          nullable: true
          description: 'The earliest date the payment may come in. Format: yyyy-mm-dd'
        description:
          type: string
          nullable: true
          description: An optional description for internal use.
        statement_descriptor:
          type: string
          nullable: true
          description: The statement description you expect to see on the transaction.
            For ACH payments, this will be the full line item passed from the bank.
            For wire payments, this will be the OBI field on the wire. For check payments,
            this will be the memo field.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        counterparty_id:
          type: string
          format: uuid
          description: The ID of the counterparty you expect for this payment.
          nullable: true
        remittance_information:
          type: string
          nullable: true
          description: For `ach`, this field will be passed through on an addenda
            record. For `wire` payments the field will be passed through as the "Originator
            to Beneficiary Information", also known as OBI or Fedwire tag 6000.
        transaction_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the Transaction this expected payment object has
            been matched to.
        transaction_line_item_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the Transaction Line Item this expected payment has
            been matched to.
        status:
          type: string
          enum:
          - archived
          - reconciled
          - unreconciled
          description: One of unreconciled, reconciled, or archived.
        reconciliation_method:
          type: string
          enum:
          - automatic
          - manual
          nullable: true
          description: One of manual if this expected payment was manually reconciled
            in the dashboard, automatic if it was automatically reconciled by Modern
            Treasury, or null if it is unreconciled.
        ledger_transaction_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the ledger transaction linked to the expected payment.
      additionalProperties: false
      minProperties: 23
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - amount_upper_bound
      - amount_lower_bound
      - direction
      - internal_account_id
      - type
      - currency
      - date_upper_bound
      - date_lower_bound
      - description
      - statement_descriptor
      - metadata
      - counterparty_id
      - remittance_information
      - transaction_id
      - transaction_line_item_id
      - status
      - reconciliation_method
      - ledger_transaction_id
    expected_payment_create_request:
      type: object
      properties:
        amount_upper_bound:
          type: integer
          description: The highest amount this expected payment may be equal to. Value
            in specified currency's smallest unit. e.g. $10 would be represented as
            1000.
        amount_lower_bound:
          type: integer
          description: The lowest amount this expected payment may be equal to. Value
            in specified currency's smallest unit. e.g. $10 would be represented as
            1000.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of credit or debit. When you are receiving money, use credit.
            When you are being charged, use debit.
        internal_account_id:
          type: string
          format: uuid
          description: The ID of the Internal Account for the expected payment.
        type:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          nullable: true
          description: 'One of: ach, au_becs, bacs, book, check, eft, interac, provxchange,
            rtp, sen, sepa, signet, wire.'
        currency:
          "$ref": "#/components/schemas/currency"
          description: Must conform to ISO 4217. Defaults to the currency of the internal
            account.
        date_upper_bound:
          type: string
          format: date
          nullable: true
          description: 'The latest date the payment may come in. Format: yyyy-mm-dd'
        date_lower_bound:
          type: string
          format: date
          nullable: true
          description: 'The earliest date the payment may come in. Format: yyyy-mm-dd'
        description:
          type: string
          nullable: true
          description: An optional description for internal use.
        statement_descriptor:
          type: string
          nullable: true
          description: The statement description you expect to see on the transaction.
            For ACH payments, this will be the full line item passed from the bank.
            For wire payments, this will be the OBI field on the wire. For check payments,
            this will be the memo field.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        counterparty_id:
          type: string
          format: uuid
          description: The ID of the counterparty you expect for this payment.
          nullable: true
        remittance_information:
          type: string
          nullable: true
          description: For `ach`, this field will be passed through on an addenda
            record. For `wire` payments the field will be passed through as the "Originator
            to Beneficiary Information", also known as OBI or Fedwire tag 6000.
        line_items:
          type: array
          items:
            "$ref": "#/components/schemas/line_item_request"
      required:
      - amount_upper_bound
      - amount_lower_bound
      - direction
      - internal_account_id
    expected_payment_update_request:
      type: object
      properties:
        amount_upper_bound:
          type: integer
          description: The highest amount this expected payment may be equal to. Value
            in specified currency's smallest unit. e.g. $10 would be represented as
            1000.
        amount_lower_bound:
          type: integer
          description: The lowest amount this expected payment may be equal to. Value
            in specified currency's smallest unit. e.g. $10 would be represented as
            1000.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of credit or debit. When you are receiving money, use credit.
            When you are being charged, use debit.
        internal_account_id:
          type: string
          format: uuid
          description: The ID of the Internal Account for the expected payment.
        type:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          nullable: true
          description: 'One of: ach, au_becs, bacs, book, check, eft, interac, provxchange,
            rtp, sen, sepa, signet, wire.'
        currency:
          "$ref": "#/components/schemas/currency"
          description: Must conform to ISO 4217. Defaults to the currency of the internal
            account.
        date_upper_bound:
          type: string
          format: date
          nullable: true
          description: 'The latest date the payment may come in. Format: yyyy-mm-dd'
        date_lower_bound:
          type: string
          format: date
          nullable: true
          description: 'The earliest date the payment may come in. Format: yyyy-mm-dd'
        description:
          type: string
          nullable: true
          description: An optional description for internal use.
        statement_descriptor:
          type: string
          nullable: true
          description: The statement description you expect to see on the transaction.
            For ACH payments, this will be the full line item passed from the bank.
            For wire payments, this will be the OBI field on the wire. For check payments,
            this will be the memo field.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        counterparty_id:
          type: string
          format: uuid
          description: The ID of the counterparty you expect for this payment.
          nullable: true
        remittance_information:
          type: string
          nullable: true
          description: For `ach`, this field will be passed through on an addenda
            record. For `wire` payments the field will be passed through as the "Originator
            to Beneficiary Information", also known as OBI or Fedwire tag 6000.
    external_account:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        account_type:
          type: string
          enum:
          - cash
          - checking
          - loan
          - non_resident
          - other
          - overdraft
          - savings
          description: Can be `checking`, `savings` or `other`.
        party_type:
          type: string
          enum:
          - business
          - individual
          nullable: true
          description: Either `individual` or `business`.
        party_address:
          "$ref": "#/components/schemas/address"
          description: The address associated with the owner or `null`.
        name:
          type: string
          nullable: true
          description: A nickname for the external account. This is only for internal
            usage and won't affect any payments
        counterparty_id:
          type: string
          format: uuid
          nullable: true
        account_details:
          type: array
          items:
            "$ref": "#/components/schemas/account_detail"
        routing_details:
          type: array
          items:
            "$ref": "#/components/schemas/routing_detail"
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
        party_name:
          type: string
          description: The legal name of the entity which owns the account.
        contact_details:
          type: array
          items:
            "$ref": "#/components/schemas/contact_detail"
        verification_status:
          type: string
          enum:
          - pending_verification
          - unverified
          - verified
      additionalProperties: false
      minProperties: 17
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - account_type
      - party_type
      - party_address
      - name
      - counterparty_id
      - account_details
      - routing_details
      - metadata
      - party_name
      - contact_details
      - verification_status
    external_account_complete_verification_request:
      type: object
      properties:
        amounts:
          type: array
          items:
            type: integer
          maxItems: 2
          example:
          - 2
          - 4
    external_account_create_request:
      type: object
      properties:
        account_type:
          type: string
          enum:
          - cash
          - checking
          - loan
          - non_resident
          - other
          - overdraft
          - savings
          description: Can be `checking`, `savings` or `other`.
        party_type:
          type: string
          enum:
          - business
          - individual
          nullable: true
          description: Either `individual` or `business`.
        party_address:
          "$ref": "#/components/schemas/address_request"
          description: Required if receiving wire payments.
        name:
          type: string
          nullable: true
          description: A nickname for the external account. This is only for internal
            usage and won't affect any payments
        counterparty_id:
          type: string
          format: uuid
          nullable: true
        account_details:
          type: array
          items:
            type: object
            properties:
              account_number:
                type: string
              account_number_type:
                type: string
                enum:
                - iban
                - clabe
                - wallet_address
                - pan
                - other
            required:
            - account_number
        routing_details:
          type: array
          items:
            type: object
            properties:
              routing_number:
                type: string
              routing_number_type:
                type: string
                enum:
                - aba
                - swift
                - au_bsb
                - ca_cpa
                - cnaps
                - gb_sort_code
                - in_ifsc
                - my_branch_code
                - br_codigo
              payment_type:
                type: string
                enum:
                - ach
                - au_becs
                - bacs
                - book
                - card
                - check
                - eft
                - cross_border
                - interac
                - masav
                - neft
                - provxchange
                - rtp
                - sen
                - sepa
                - signet
                - wire
            required:
            - routing_number
            - routing_number_type
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
        party_name:
          type: string
          description: If this value isn't provided, it will be inherited from the
            counterparty's name.
        party_identifier:
          type: string
        plaid_processor_token:
          type: string
          description: If you've enabled the Modern Treasury + Plaid integration in
            your Plaid account, you can pass the processor token in this field.
        contact_details:
          type: array
          items:
            "$ref": "#/components/schemas/contact_detail_create_request"
      required:
      - counterparty_id
    external_account_update_request:
      type: object
      properties:
        party_type:
          type: string
          enum:
          - business
          - individual
          nullable: true
          description: Either `individual` or `business`.
        account_type:
          type: string
          enum:
          - cash
          - checking
          - loan
          - non_resident
          - other
          - overdraft
          - savings
          description: Can be `checking`, `savings` or `other`.
        counterparty_id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
          description: A nickname for the external account. This is only for internal
            usage and won't affect any payments
        party_name:
          type: string
          description: If this value isn't provided, it will be inherited from the
            counterparty's name.
        party_address:
          "$ref": "#/components/schemas/address_request"
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Additional data in the form of key-value pairs. Pairs can be
            removed by passing an empty string or `null` as the value.
    external_account_verify_request:
      type: object
      properties:
        originating_account_id:
          type: string
          format: uuid
          description: The ID of the internal account where the micro-deposits originate
            from. Both credit and debit capabilities must be enabled.
        payment_type:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          description: Both ach and eft are supported payment types.
        currency:
          "$ref": "#/components/schemas/currency"
          description: Defaults to the currency of the originating account.
      required:
      - originating_account_id
      - payment_type
    incoming_payment_detail_update_request:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Additional data in the form of key-value pairs. Pairs can be
            removed by passing an empty string or `null` as the value.
    incoming_payment_detail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        internal_account_id:
          type: string
          format: uuid
          description: The ID of the Internal Account for the incoming payment detail.
            This is always present.
        virtual_account_id:
          type: string
          format: uuid
          nullable: true
          description: If the incoming payment detail is in a virtual account, the
            ID of the Virtual Account.
        virtual_account:
          "$ref": "#/components/schemas/virtual_account"
          nullable: true
          description: If the incoming payment detail is in a virtual account, the
            serialized virtual account object.
        transaction_line_item_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the reconciled Transaction Line Item or `null`.
        transaction_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the reconciled Transaction or `null`.
        type:
          type: string
          enum:
          - ach
          - book
          - check
          - eft
          - interac
          - rtp
          - sepa
          - signet
          - wire
          description: 'One of: `ach`, `book`, `check`, `eft`, `interac`, `rtp`, `sepa`,
            `signet`, or `wire`.'
        data:
          type: object
          description: The raw data from the payment pre-notification file that we
            get from the bank.
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000.
        currency:
          "$ref": "#/components/schemas/currency"
          description: The currency of the incoming payment detail.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of `credit` or `debit`.
        status:
          type: string
          enum:
          - completed
          - pending
          - returned
          description: The current status of the incoming payment order. One of `pending`,
            `completed`, or `returned`.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        as_of_date:
          type: string
          format: date
          description: The date on which the corresponding transaction will occur.
        vendor_id:
          type: string
          format: uuid
          nullable: true
          description: The identifier of the vendor bank.
      additionalProperties: false
      minProperties: 19
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - internal_account_id
      - virtual_account_id
      - virtual_account
      - transaction_line_item_id
      - transaction_id
      - type
      - data
      - amount
      - currency
      - direction
      - status
      - metadata
      - as_of_date
      - vendor_id
    internal_account:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        account_type:
          type: string
          enum:
          - cash
          - checking
          - loan
          - non_resident
          - other
          - overdraft
          - savings
          nullable: true
          description: Can be checking, savings or other.
        party_name:
          type: string
          description: The legal name of the entity which owns the account.
        party_type:
          type: string
          enum:
          - business
          - individual
          nullable: true
          description: Either individual or business.
        party_address:
          "$ref": "#/components/schemas/address"
          description: The address associated with the owner or null.
        name:
          type: string
          nullable: true
          description: A nickname for the account.
        account_details:
          type: array
          items:
            "$ref": "#/components/schemas/account_detail"
          description: An array of account detail objects.
        routing_details:
          type: array
          items:
            "$ref": "#/components/schemas/routing_detail"
          description: An array of routing detail objects.
        connection:
          "$ref": "#/components/schemas/connection"
          description: Specifies which financial institution the accounts belong to.
        currency:
          "$ref": "#/components/schemas/currency"
          description: The currency of the account.
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
        parent_account_id:
          type: string
          format: uuid
          nullable: true
          description: The parent InternalAccount of this account.
        counterparty_id:
          type: string
          format: uuid
          nullable: true
          description: The Counterparty associated to this account.
      additionalProperties: false
      minProperties: 17
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - account_type
      - party_name
      - party_type
      - party_address
      - name
      - account_details
      - routing_details
      - connection
      - currency
      - metadata
      - parent_account_id
      - counterparty_id
    internal_account_create_request:
      type: object
      properties:
        connection_id:
          type: string
          description: The identifier of the financial institution the account belongs
            to.
        name:
          type: string
          description: The nickname of the account.
        party_name:
          type: string
          description: The legal name of the entity which owns the account.
        party_address:
          type: object
          description: The address associated with the owner or null.
          properties:
            line1:
              type: string
            line2:
              type: string
            locality:
              type: string
              description: Locality or City.
            region:
              type: string
              description: Region or State.
            postal_code:
              type: string
              description: The postal code of the address.
            country:
              type: string
              description: Country code conforms to [ISO 3166-1 alpha-2]
          required:
          - line1
          - locality
          - region
          - postal_code
          - country
        currency:
          type: string
          enum:
          - USD
          - CAD
          example: USD
          description: Either "USD" or "CAD". Internal accounts created at Increase
            only supports "USD".
        entity_id:
          type: string
          description: The identifier of the entity at Increase which owns the account.
        parent_account_id:
          type: string
          description: The parent internal account of this new account.
        counterparty_id:
          type: string
          description: The Counterparty associated to this account.
      required:
      - connection_id
      - name
      - party_name
      - currency
    internal_account_update_request:
      type: object
      properties:
        name:
          type: string
          description: The nickname for the internal account.
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Additional data in the form of key-value pairs. Pairs can be
            removed by passing an empty string or `null` as the value.
        parent_account_id:
          type: string
          description: The parent internal account for this account.
        counterparty_id:
          type: string
          description: The Counterparty associated to this account.
    ledger:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          description: The name of the ledger.
        description:
          type: string
          description: An optional free-form description for internal use.
          nullable: true
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
      additionalProperties: true
      minProperties: 9
      maxProperties: 11
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - name
      - description
      - metadata
    ledger_create_request:
      type: object
      properties:
        name:
          type: string
          description: The name of the ledger.
        description:
          type: string
          description: An optional free-form description for internal use.
          nullable: true
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
      required:
      - name
    ledger_update_request:
      type: object
      properties:
        name:
          type: string
          description: The name of the ledger.
        description:
          type: string
          description: An optional free-form description for internal use.
          nullable: true
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
    ledger_account:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          description: The name of the ledger account.
        description:
          type: string
          description: The description of the ledger account.
          nullable: true
        normal_balance:
          type: string
          enum:
          - credit
          - debit
          description: The normal balance of the ledger account.
        balances:
          "$ref": "#/components/schemas/ledger_balances"
          description: The pending, posted, and available balances for this ledger
            account. The posted balance is the sum of all posted entries on the account.
            The pending balance is the sum of all pending and posted entries on the
            account. The available balance is the posted incoming entries minus the
            sum of the pending and posted outgoing amounts.
        lock_version:
          type: integer
          description: Lock version of the ledger account.
        ledger_id:
          type: string
          format: uuid
          description: The id of the ledger that this account belongs to.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
      additionalProperties: false
      minProperties: 13
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - name
      - description
      - normal_balance
      - balances
      - lock_version
      - ledger_id
      - metadata
    ledger_account_create_request:
      type: object
      properties:
        name:
          type: string
          description: The name of the ledger account.
        description:
          type: string
          description: The description of the ledger account.
          nullable: true
        normal_balance:
          type: string
          enum:
          - credit
          - debit
          description: The normal balance of the ledger account.
        ledger_id:
          type: string
          format: uuid
          description: The id of the ledger that this account belongs to.
        currency:
          type: string
          description: The currency of the ledger account.
        currency_exponent:
          type: integer
          description: The currency exponent of the ledger account.
          nullable: true
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
      required:
      - name
      - normal_balance
      - ledger_id
      - currency
    ledger_account_update_request:
      type: object
      properties:
        name:
          type: string
          description: The name of the ledger account.
        description:
          type: string
          description: The description of the ledger account.
          nullable: true
        normal_balance:
          type: string
          enum:
          - credit
          - debit
          description: The normal balance of the ledger account.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
    ledger_account_category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          description: The name of the ledger account category.
        description:
          type: string
          description: The description of the ledger account category.
          nullable: true
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        ledger_id:
          type: string
          format: uuid
          description: The id of the ledger that this account category belongs to.
        normal_balance:
          type: string
          enum:
          - credit
          - debit
          description: The normal balance of the ledger account category.
        balances:
          "$ref": "#/components/schemas/ledger_balances"
          description: The pending, posted, and available balances for this ledger
            account category. The posted balance is the sum of all posted entries
            on the account. The pending balance is the sum of all pending and posted
            entries on the account. The available balance is the posted incoming entries
            minus the sum of the pending and posted outgoing amounts.
      additionalProperties: false
      minProperties: 12
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - name
      - description
      - metadata
      - ledger_id
      - normal_balance
      - balances
    ledger_account_category_create_request:
      type: object
      properties:
        name:
          type: string
          description: The name of the ledger account category.
        description:
          type: string
          description: The description of the ledger account category.
          nullable: true
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        currency:
          type: string
          description: The currency of the ledger account category.
        currency_exponent:
          type: integer
          description: The currency exponent of the ledger account category.
          nullable: true
        ledger_id:
          type: string
          format: uuid
          description: The id of the ledger that this account category belongs to.
        normal_balance:
          type: string
          enum:
          - credit
          - debit
          description: The normal balance of the ledger account category.
      required:
      - name
      - normal_balance
      - currency
      - ledger_id
    ledger_account_category_update_request:
      type: object
      properties:
        name:
          type: string
          description: The name of the ledger account category.
        description:
          type: string
          description: The description of the ledger account category.
          nullable: true
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
    ledger_balance:
      type: object
      properties:
        credits:
          type: integer
        debits:
          type: integer
        amount:
          type: integer
        currency:
          type: string
          description: The currency of the ledger account.
        currency_exponent:
          type: integer
          description: The currency exponent of the ledger account.
      additionalProperties: false
      minProperties: 5
      required:
      - credits
      - debits
      - amount
      - currency
      - currency_exponent
    ledger_balances:
      type: object
      properties:
        pending_balance:
          "$ref": "#/components/schemas/ledger_balance"
          description: The pending_balance is the sum of all pending and posted entries.
        posted_balance:
          "$ref": "#/components/schemas/ledger_balance"
          description: The posted_balance is the sum of all posted entries.
        available_balance:
          "$ref": "#/components/schemas/ledger_balance"
          description: The available_balance is the sum of all posted inbound entries
            and pending outbound entries. For credit normal, available_amount = posted_credits
            - pending_debits; for debit normal, available_amount = posted_debits -
            pending_credits.
      additionalProperties: false
      minProperties: 3
      required:
      - pending_balance
      - posted_balance
      - available_balance
    ledger_entry:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000. Can be any integer up to 36 digits.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of `credit`, `debit`. Describes the direction money is
            flowing in the transaction. A `credit` moves money from your account to
            someone else's. A `debit` pulls money from someone else's account to your
            own. Note that wire, rtp, and check payments will always be `credit`.
        status:
          type: string
          enum:
          - archived
          - pending
          - posted
          description: Equal to the state of the ledger transaction when the ledger
            entry was created. One of `pending`, `posted`, or `archived`.
        ledger_account_id:
          type: string
          format: uuid
          description: The ledger account that this ledger entry is associated with.
        ledger_account_lock_version:
          type: integer
          description: Lock version of the ledger account. This can be passed when
            creating a ledger transaction to only succeed if no ledger transactions
            have posted since the given version. See our post about Designing the
            Ledgers API with Optimistic Locking for more details.
          nullable: true
        ledger_account_currency:
          type: string
          description: The currency of the ledger account.
        ledger_account_currency_exponent:
          type: integer
          description: The currency exponent of the ledger account.
        ledger_transaction_id:
          type: string
          description: The ledger transaction that this ledger entry is associated
            with.
        resulting_ledger_account_balances:
          "$ref": "#/components/schemas/ledger_balances"
          description: The pending, posted, and available balances for this ledger
            entry's ledger account. The posted balance is the sum of all posted entries
            on the account. The pending balance is the sum of all pending and posted
            entries on the account. The available balance is the posted incoming entries
            minus the sum of the pending and posted outgoing amounts. Please see https://docs.moderntreasury.com/docs/transaction-status-and-balances
            for more details.
          nullable: true
      additionalProperties: false
      minProperties: 15
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - amount
      - direction
      - status
      - ledger_account_id
      - ledger_account_lock_version
      - ledger_account_currency
      - ledger_account_currency_exponent
      - ledger_transaction_id
      - resulting_ledger_account_balances
    ledger_entry_create_request:
      type: object
      properties:
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000. Can be any integer up to 36 digits.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of `credit`, `debit`. Describes the direction money is
            flowing in the transaction. A `credit` moves money from your account to
            someone else's. A `debit` pulls money from someone else's account to your
            own. Note that wire, rtp, and check payments will always be `credit`.
        ledger_account_id:
          type: string
          format: uuid
          description: The ledger account that this ledger entry is associated with.
        lock_version:
          type: integer
          description: Lock version of the ledger account. This can be passed when
            creating a ledger transaction to only succeed if no ledger transactions
            have posted since the given version. See our post about Designing the
            Ledgers API with Optimistic Locking for more details.
          nullable: true
        pending_balance_amount:
          type: object
          additionalProperties:
            type: integer
          description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=)
            to lock on the account’s pending balance. If any of these conditions would
            be false after the transaction is created, the entire call will fail with
            error code 422.
          nullable: true
        posted_balance_amount:
          type: object
          additionalProperties:
            type: integer
          description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=)
            to lock on the account’s posted balance. If any of these conditions would
            be false after the transaction is created, the entire call will fail with
            error code 422.
          nullable: true
        available_balance_amount:
          type: object
          additionalProperties:
            type: integer
          description: Use `gt` (>), `gte` (>=), `lt` (<), `lte` (<=), or `eq` (=)
            to lock on the account’s available balance. If any of these conditions
            would be false after the transaction is created, the entire call will
            fail with error code 422.
          nullable: true
        show_resulting_ledger_account_balances:
          type: boolean
          description: If true, response will include the balance of the associated
            ledger account for the entry.
          nullable: true
      required:
      - amount
      - direction
      - ledger_account_id
    ledger_entry_of_transaction_version:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000. Can be any integer up to 36 digits.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of `credit`, `debit`. Describes the direction money is
            flowing in the transaction. A `credit` moves money from your account to
            someone else's. A `debit` pulls money from someone else's account to your
            own. Note that wire, rtp, and check payments will always be `credit`.
        status:
          type: string
          enum:
          - archived
          - pending
          - posted
          description: Equal to the state of the ledger transaction when the ledger
            entry was created. One of `pending`, `posted`, or `archived`.
        ledger_account_id:
          type: string
          format: uuid
          description: The ledger account that this ledger entry is associated with.
        ledger_account_lock_version:
          type: integer
          description: Lock version of the ledger account. This can be passed when
            creating a ledger transaction to only succeed if no ledger transactions
            have posted since the given version. See our post about Designing the
            Ledgers API with Optimistic Locking for more details.
          nullable: true
        ledger_account_currency:
          type: string
          description: The currency of the ledger account.
        ledger_account_currency_exponent:
          type: integer
          description: The currency exponent of the ledger account.
        ledger_transaction_id:
          type: string
          description: The ledger transaction that this ledger entry is associated
            with.
        resulting_ledger_account_balances:
          "$ref": "#/components/schemas/ledger_balances"
          description: The pending, posted, and available balances for this ledger
            entry's ledger account. The posted balance is the sum of all posted entries
            on the account. The pending balance is the sum of all pending and posted
            entries on the account. The available balance is the posted incoming entries
            minus the sum of the pending and posted outgoing amounts. Please see https://docs.moderntreasury.com/docs/transaction-status-and-balances
            for more details.
          nullable: true
      additionalProperties: false
      minProperties: 13
      required:
      - id
      - object
      - live_mode
      - created_at
      - amount
      - direction
      - status
      - ledger_account_id
      - ledger_account_lock_version
      - ledger_account_currency
      - ledger_account_currency_exponent
      - ledger_transaction_id
      - resulting_ledger_account_balances
    ledger_transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        description:
          type: string
          nullable: true
          description: An optional description for internal use.
        status:
          type: string
          enum:
          - archived
          - pending
          - posted
          description: To post a ledger transaction at creation, use `posted`.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        effective_at:
          type: string
          format: date
          description: The timestamp (ISO8601 format) at which the ledger transaction
            happened for reporting purposes.
        effective_date:
          type: string
          format: date
          description: The date (YYYY-MM-DD) on which the ledger transaction happened
            for reporting purposes.
        ledger_entries:
          type: array
          items:
            "$ref": "#/components/schemas/ledger_entry"
          description: An array of ledger entry objects.
        posted_at:
          type: string
          format: time
          nullable: true
          description: The time on which the ledger transaction posted. This is null
            if the ledger transaction is pending.
        ledger_id:
          type: string
          format: uuid
          description: The ID of the ledger this ledger transaction belongs to.
        ledgerable_type:
          type: string
          enum:
          - counterparty
          - expected_payment
          - incoming_payment_detail
          - internal_account
          - line_item
          - paper_item
          - payment_order
          - payment_order_attempt
          - return
          - reversal
          nullable: true
          description: If the ledger transaction can be reconciled to another object
            in Modern Treasury, the type will be populated here, otherwise null. This
            can be one of payment_order, incoming_payment_detail, expected_payment,
            return, or reversal.
        ledgerable_id:
          type: string
          format: uuid
          nullable: true
          description: If the ledger transaction can be reconciled to another object
            in Modern Treasury, the id will be populated here, otherwise null.
        external_id:
          type: string
          description: A unique string to represent the ledger transaction. Only one
            pending or posted ledger transaction may have this ID in the ledger.
          nullable: true
      additionalProperties: false
      minProperties: 16
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - description
      - status
      - metadata
      - effective_at
      - effective_date
      - ledger_entries
      - posted_at
      - ledger_id
      - ledgerable_type
      - ledgerable_id
      - external_id
    ledger_transaction_version:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        ledger_transaction_id:
          type: string
          format: uuid
          description: The ID of the ledger transaction
        description:
          type: string
          nullable: true
          description: An optional description for internal use.
        status:
          type: string
          enum:
          - archived
          - pending
          - posted
          description: One of `pending`, `posted`, or `archived`
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        effective_date:
          type: string
          format: date
          description: The date (YYYY-MM-DD) on which the ledger transaction happened
            for reporting purposes.
        ledger_entries:
          type: array
          items:
            "$ref": "#/components/schemas/ledger_entry_of_transaction_version"
          description: An array of ledger entry objects.
        posted_at:
          type: string
          format: time
          nullable: true
          description: The time on which the ledger transaction posted. This is null
            if the ledger transaction is pending.
        ledger_id:
          type: string
          format: uuid
          description: The ID of the ledger this ledger transaction belongs to.
        ledgerable_type:
          type: string
          enum:
          - counterparty
          - expected_payment
          - incoming_payment_detail
          - internal_account
          - line_item
          - paper_item
          - payment_order
          - payment_order_attempt
          - return
          - reversal
          nullable: true
          description: If the ledger transaction can be reconciled to another object
            in Modern Treasury, the type will be populated here, otherwise null. This
            can be one of payment_order, incoming_payment_detail, expected_payment,
            return, or reversal.
        ledgerable_id:
          type: string
          format: uuid
          nullable: true
          description: If the ledger transaction can be reconciled to another object
            in Modern Treasury, the id will be populated here, otherwise null.
        external_id:
          type: string
          description: A unique string to represent the ledger transaction. Only one
            pending or posted ledger transaction may have this ID in the ledger.
          nullable: true
        version:
          type: integer
          description: Version number of the ledger transaction.
      additionalProperties: false
      minProperties: 16
      required:
      - id
      - object
      - live_mode
      - created_at
      - ledger_transaction_id
      - description
      - status
      - metadata
      - effective_date
      - ledger_entries
      - posted_at
      - ledger_id
      - ledgerable_type
      - ledgerable_id
      - external_id
      - version
    ledger_transaction_create_request:
      type: object
      properties:
        description:
          type: string
          description: An optional description for internal use.
          nullable: true
        status:
          type: string
          enum:
          - archived
          - pending
          - posted
          description: To post a ledger transaction at creation, use `posted`.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        effective_date:
          type: string
          format: date
          description: The date (YYYY-MM-DD) on which the ledger transaction happened
            for reporting purposes.
        ledger_entries:
          type: array
          items:
            "$ref": "#/components/schemas/ledger_entry_create_request"
          description: An array of ledger entry objects.
        external_id:
          type: string
          description: A unique string to represent the ledger transaction. Only one
            pending or posted ledger transaction may have this ID in the ledger.
        ledgerable_type:
          type: string
          enum:
          - counterparty
          - expected_payment
          - incoming_payment_detail
          - internal_account
          - line_item
          - paper_item
          - payment_order
          - payment_order_attempt
          - return
          - reversal
          description: If the ledger transaction can be reconciled to another object
            in Modern Treasury, the type will be populated here, otherwise null. This
            can be one of payment_order, incoming_payment_detail, expected_payment,
            return, or reversal.
        ledgerable_id:
          type: string
          format: uuid
          description: If the ledger transaction can be reconciled to another object
            in Modern Treasury, the id will be populated here, otherwise null.
      required:
      - effective_date
      - ledger_entries
    ledger_transaction_update_request:
      type: object
      properties:
        description:
          type: string
          description: An optional description for internal use.
          nullable: true
        status:
          type: string
          enum:
          - archived
          - pending
          - posted
          description: To post a ledger transaction at creation, use `posted`.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        ledger_entries:
          type: array
          items:
            "$ref": "#/components/schemas/ledger_entry_create_request"
          description: An array of ledger entry objects.
    line_item:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        itemizable_id:
          type: string
          format: uuid
          description: The ID of the payment order or expected payment.
        itemizable_type:
          type: string
          enum:
          - ExpectedPayment
          - PaymentOrder
          description: One of `payment_orders` or `expected_payments`.
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000.
        description:
          type: string
          description: A free-form description of the line item.
          nullable: true
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        accounting:
          "$ref": "#/components/schemas/accounting"
        accounting_category_id:
          type: string
          format: uuid
          description: The ID of one of your accounting categories. Note that these
            will only be accessible if your accounting system has been connected.
          nullable: true
        accounting_ledger_class_id:
          type: string
          format: uuid
          description: The ID of one of the class objects in your accounting system.
            Class objects track segments of your business independent of client or
            project. Note that these will only be accessible if your accounting system
            has been connected.
          nullable: true
      additionalProperties: false
      minProperties: 13
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - itemizable_id
      - itemizable_type
      - amount
      - description
      - metadata
      - accounting
      - accounting_category_id
      - accounting_ledger_class_id
    line_item_request:
      type: object
      properties:
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        description:
          type: string
          description: A free-form description of the line item.
          nullable: true
        accounting_category_id:
          type: string
          description: The ID of one of your accounting categories. Note that these
            will only be accessible if your accounting system has been connected.
          nullable: true
      required:
      - amount
    line_item_update_request:
      type: object
      properties:
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
    paper_item:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        transaction_line_item_id:
          type: string
          format: uuid
          description: The ID of the reconciled Transaction Line Item or `null`.
          nullable: true
        transaction_id:
          type: string
          format: uuid
          description: The ID of the reconciled Transaction or `null`.
          nullable: true
        status:
          type: string
          description: The current status of the paper item. One of `pending`, `completed`,
            or `returned`.
          enum:
          - completed
          - pending
          - returned
        lockbox_number:
          type: string
          description: The identifier for the lockbox assigned by the bank.
        deposit_date:
          type: string
          format: date
          description: The date the paper item was deposited into your organization's
            bank account.
        amount:
          type: integer
          description: The amount of the paper item.
        currency:
          "$ref": "#/components/schemas/currency"
          description: The currency of the paper item.
        account_number:
          type: string
          description: The account number on the paper item.
          nullable: true
        account_number_safe:
          type: string
          description: The last 4 digits of the account_number.
          nullable: true
        routing_number:
          type: string
          description: The routing number on the paper item.
          nullable: true
        check_number:
          type: string
          description: The check number on the paper item.
          nullable: true
        remitter_name:
          type: string
          description: The name of the remitter on the paper item.
          nullable: true
        memo_field:
          type: string
          description: The memo field on the paper item.
          nullable: true
      additionalProperties: false
      minProperties: 18
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - transaction_line_item_id
      - transaction_id
      - status
      - lockbox_number
      - deposit_date
      - amount
      - currency
      - account_number
      - account_number_safe
      - routing_number
      - check_number
      - remitter_name
      - memo_field
    payment_order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        type:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          description: One of `ach`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`,
            `sepa`, `bacs`, `au_becs`, `interac`, `signet`, `provexchange`.
        subtype:
          type: string
          enum:
          - CCD
          - CIE
          - CTX
          - IAT
          - PPD
          - TEL
          - WEB
          nullable: true
          description: An additional layer of classification for the type of payment
            order you are doing. This field is only used for `ach` payment orders
            currently. For `ach`  payment orders, the `subtype`  represents the SEC
            code. We currently support `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and
            `TEL`.
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000 (cents). For RTP, the maximum amount allowed by
            the network is $100,000.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of `credit`, `debit`. Describes the direction money is
            flowing in the transaction. A `credit` moves money from your account to
            someone else's. A `debit` pulls money from someone else's account to your
            own. Note that wire, rtp, and check payments will always be `credit`.
        priority:
          type: string
          enum:
          - high
          - normal
          description: Either `normal` or `high`. For ACH and EFT payments, `high`
            represents a same-day ACH or EFT transfer, respectively. For check payments,
            `high` can mean an overnight check rather than standard mail.
        originating_account_id:
          type: string
          format: uuid
          description: The ID of one of your organization's internal accounts.
        receiving_account_id:
          type: string
          format: uuid
          description: The receiving account ID. Can be an `external_account` or `internal_account`.
        accounting:
          "$ref": "#/components/schemas/accounting"
        accounting_category_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of one of your accounting categories. Note that these
            will only be accessible if your accounting system has been connected.
          deprecated: true
        accounting_ledger_class_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of one of your accounting ledger classes. Note that
            these will only be accessible if your accounting system has been connected.
          deprecated: true
        currency:
          "$ref": "#/components/schemas/currency"
          description: Defaults to the currency of the originating account.
        effective_date:
          type: string
          format: date
          description: 'Date transactions are to be posted to the participants'' account.
            Defaults to the current business day or the next business day if the current
            day is a bank holiday or weekend. Format: yyyy-mm-dd.'
        description:
          type: string
          nullable: true
          description: An optional description for internal use.
        statement_descriptor:
          type: string
          nullable: true
          description: An optional descriptor which will appear in the receiver's
            statement. For `check` payments this field will be used as the memo line.
            For `ach` the maximum length is 10 characters. Note that for ACH payments,
            the name on your bank account will be included automatically by the bank,
            so you can use the characters for other useful information. For `eft`
            the maximum length is 15 characters.
        remittance_information:
          type: string
          nullable: true
          description: For `ach`, this field will be passed through on an addenda
            record. For `wire` payments the field will be passed through as the "Originator
            to Beneficiary Information", also known as OBI or Fedwire tag 6000.
        purpose:
          type: string
          nullable: true
          description: For `wire`, this is usually the purpose which is transmitted
            via the "InstrForDbtrAgt" field in the ISO20022 file. If you are using
            Currencycloud, this is the `payment.purpose_code` field. For `eft`, this
            field is the 3 digit CPA Code that will be attached to the payment.
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
        charge_bearer:
          type: string
          enum:
          - shared
          - sender
          - receiver
          nullable: true
          description: The party that will pay the fees for the payment order. Only
            applies to wire payment orders. Can be one of shared, sender, or receiver,
            which correspond respectively with the SWIFT 71A values `SHA`, `OUR`,
            `BEN`.
        foreign_exchange_indicator:
          type: string
          enum:
          - fixed_to_variable
          - variable_to_fixed
          nullable: true
          description: Indicates the type of FX transfer to initiate, can be either
            `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order
            currency matches the originating account currency.
        foreign_exchange_contract:
          type: string
          nullable: true
          description: If present, indicates a specific foreign exchange contract
            number that has been generated by your financial institution.
        nsf_protected:
          type: boolean
          description: A boolean to determine if NSF Protection is enabled for this
            payment order. Note that this setting must also be turned on in your organization
            settings page.
        originating_party_name:
          type: string
          nullable: true
          description: If present, this will replace your default company name on
            receiver's bank statement. This field can only be used for ACH payments
            currently. For ACH, only the first 16 characters of this string will be
            used. Any additional characters will be truncated.
        ultimate_originating_party_name:
          type: string
          nullable: true
          description: Name of the ultimate originator of the payment order.
        ultimate_originating_party_identifier:
          type: string
          nullable: true
          description: Identifier of the ultimate originator of the payment order.
        ultimate_receiving_party_name:
          type: string
          nullable: true
        ultimate_receiving_party_identifier:
          type: string
          nullable: true
        send_remittance_advice:
          type: boolean
          nullable: true
          description: Send an email to the counterparty when the payment order is
            sent to the bank. If `null`, `send_remittance_advice` on the Counterparty
            is used.
        expires_at:
          type: string
          format: date-time
          nullable: true
          description: RFP payments require an expires_at. This value must be past
            the effective_date.
        status:
          type: string
          enum:
          - approved
          - cancelled
          - completed
          - denied
          - failed
          - needs_approval
          - pending
          - processing
          - returned
          - reversed
          - sent
          description: The current status of the payment order.
        receiving_account:
          oneOf:
          - type: object
            properties:
              id:
                type: string
                format: uuid
              object:
                type: string
              live_mode:
                type: boolean
                description: This field will be true if this object exists in the
                  live environment or false if it exists in the test environment.
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
              discarded_at:
                type: string
                format: date-time
                nullable: true
              account_type:
                type: string
                enum:
                - cash
                - checking
                - loan
                - non_resident
                - other
                - overdraft
                - savings
                description: Can be `checking`, `savings` or `other`.
              party_type:
                type: string
                enum:
                - business
                - individual
                nullable: true
                description: Either `individual` or `business`.
              party_address:
                "$ref": "#/components/schemas/address"
                description: The address associated with the owner or `null`.
              name:
                type: string
                nullable: true
                description: A nickname for the external account. This is only for
                  internal usage and won't affect any payments
              account_details:
                type: array
                items:
                  "$ref": "#/components/schemas/account_detail"
              routing_details:
                type: array
                items:
                  "$ref": "#/components/schemas/routing_detail"
              metadata:
                type: object
                additionalProperties:
                  type: string
                example:
                  key: value
                  foo: bar
                  modern: treasury
                description: Additional data represented as key-value pairs. Both
                  the key and value must be strings.
              party_name:
                type: string
                description: The legal name of the entity which owns the account.
              contact_details:
                type: array
                items:
                  "$ref": "#/components/schemas/contact_detail"
              verification_status:
                type: string
                enum:
                - pending_verification
                - unverified
                - verified
            additionalProperties: false
            minProperties: 16
          - "$ref": "#/components/schemas/internal_account"
          description: The receiving account. Can be an `external_account` or `internal_account`.
          nullable: true
          deprecated: true
        receiving_account_type:
          type: string
          enum:
          - internal_account
          - external_account
        counterparty_id:
          type: string
          format: uuid
          description: If the payment order is tied to a specific Counterparty, their
            id will appear, otherwise `null`.
          nullable: true
        transaction_ids:
          type: array
          items:
            type: string
            format: uuid
          description: The IDs of all the transactions associated to this payment
            order. Usually, you will only have a single transaction ID. However, if
            a payment order initially results in a Return, but gets redrafted and
            is later successfully completed, it can have many transactions.
        ledger_transaction_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the ledger transaction linked to the payment order.
        current_return:
          "$ref": "#/components/schemas/return"
          nullable: true
          description: If the payment order's status is `returned`, this will include
            the return object's data.
        transaction_monitoring_enabled:
          type: boolean
          description: A flag that determines whether a payment order should go through
            transaction monitoring.
        reference_numbers:
          type: array
          items:
            "$ref": "#/components/schemas/payment_reference"
        vendor_failure_reason:
          type: string
          description: This field will be populated if a vendor (e.g. Currencycloud)
            failure occurs. Logic shouldn't be built on its value as it is free-form.
          nullable: true
        decision_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the compliance decision for the payment order, if
            transaction monitoring is enabled.
      additionalProperties: false
      minProperties: 44
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - type
      - subtype
      - amount
      - direction
      - priority
      - originating_account_id
      - receiving_account_id
      - accounting
      - accounting_category_id
      - accounting_ledger_class_id
      - currency
      - effective_date
      - description
      - statement_descriptor
      - remittance_information
      - purpose
      - metadata
      - charge_bearer
      - foreign_exchange_indicator
      - foreign_exchange_contract
      - nsf_protected
      - originating_party_name
      - ultimate_originating_party_name
      - ultimate_originating_party_identifier
      - ultimate_receiving_party_name
      - ultimate_receiving_party_identifier
      - send_remittance_advice
      - expires_at
      - status
      - receiving_account
      - receiving_account_type
      - counterparty_id
      - transaction_ids
      - ledger_transaction_id
      - current_return
      - transaction_monitoring_enabled
      - reference_numbers
      - vendor_failure_reason
      - decision_id
    payment_order_create_request:
      type: object
      properties:
        type:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          description: One of `ach`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`,
            `sepa`, `bacs`, `au_becs`, `interac`, `signet`, `provexchange`.
        subtype:
          type: string
          enum:
          - CCD
          - CIE
          - CTX
          - IAT
          - PPD
          - TEL
          - WEB
          nullable: true
          description: An additional layer of classification for the type of payment
            order you are doing. This field is only used for `ach` payment orders
            currently. For `ach`  payment orders, the `subtype`  represents the SEC
            code. We currently support `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and
            `TEL`.
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000 (cents). For RTP, the maximum amount allowed by
            the network is $100,000.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of `credit`, `debit`. Describes the direction money is
            flowing in the transaction. A `credit` moves money from your account to
            someone else's. A `debit` pulls money from someone else's account to your
            own. Note that wire, rtp, and check payments will always be `credit`.
        priority:
          type: string
          enum:
          - high
          - normal
          description: Either `normal` or `high`. For ACH and EFT payments, `high`
            represents a same-day ACH or EFT transfer, respectively. For check payments,
            `high` can mean an overnight check rather than standard mail.
        originating_account_id:
          type: string
          format: uuid
          description: The ID of one of your organization's internal accounts.
        receiving_account_id:
          type: string
          format: uuid
          description: Either `receiving_account` or `receiving_account_id` must be
            present. When using `receiving_account_id`, you may pass the id of an
            external account or an internal account.
        accounting:
          "$ref": "#/components/schemas/accounting"
        accounting_category_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of one of your accounting categories. Note that these
            will only be accessible if your accounting system has been connected.
          deprecated: true
        accounting_ledger_class_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of one of your accounting ledger classes. Note that
            these will only be accessible if your accounting system has been connected.
          deprecated: true
        currency:
          "$ref": "#/components/schemas/currency"
          description: Defaults to the currency of the originating account.
        effective_date:
          type: string
          format: date
          description: 'Date transactions are to be posted to the participants'' account.
            Defaults to the current business day or the next business day if the current
            day is a bank holiday or weekend. Format: yyyy-mm-dd.'
        description:
          type: string
          nullable: true
          description: An optional description for internal use.
        statement_descriptor:
          type: string
          nullable: true
          description: An optional descriptor which will appear in the receiver's
            statement. For `check` payments this field will be used as the memo line.
            For `ach` the maximum length is 10 characters. Note that for ACH payments,
            the name on your bank account will be included automatically by the bank,
            so you can use the characters for other useful information. For `eft`
            the maximum length is 15 characters.
        remittance_information:
          type: string
          nullable: true
          description: For `ach`, this field will be passed through on an addenda
            record. For `wire` payments the field will be passed through as the "Originator
            to Beneficiary Information", also known as OBI or Fedwire tag 6000.
        purpose:
          type: string
          nullable: true
          description: For `wire`, this is usually the purpose which is transmitted
            via the "InstrForDbtrAgt" field in the ISO20022 file. If you are using
            Currencycloud, this is the `payment.purpose_code` field. For `eft`, this
            field is the 3 digit CPA Code that will be attached to the payment.
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
        charge_bearer:
          type: string
          enum:
          - shared
          - sender
          - receiver
          nullable: true
          description: The party that will pay the fees for the payment order. Only
            applies to wire payment orders. Can be one of shared, sender, or receiver,
            which correspond respectively with the SWIFT 71A values `SHA`, `OUR`,
            `BEN`.
        foreign_exchange_indicator:
          type: string
          enum:
          - fixed_to_variable
          - variable_to_fixed
          nullable: true
          description: Indicates the type of FX transfer to initiate, can be either
            `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order
            currency matches the originating account currency.
        foreign_exchange_contract:
          type: string
          nullable: true
          description: If present, indicates a specific foreign exchange contract
            number that has been generated by your financial institution.
        nsf_protected:
          type: boolean
          description: A boolean to determine if NSF Protection is enabled for this
            payment order. Note that this setting must also be turned on in your organization
            settings page.
        originating_party_name:
          type: string
          nullable: true
          description: If present, this will replace your default company name on
            receiver's bank statement. This field can only be used for ACH payments
            currently. For ACH, only the first 16 characters of this string will be
            used. Any additional characters will be truncated.
        ultimate_originating_party_name:
          type: string
          nullable: true
          description: Name of the ultimate originator of the payment order.
        ultimate_originating_party_identifier:
          type: string
          nullable: true
          description: Identifier of the ultimate originator of the payment order.
        ultimate_receiving_party_name:
          type: string
          nullable: true
          description: Name of the ultimate funds recipient.
        ultimate_receiving_party_identifier:
          type: string
          nullable: true
          description: Identifier of the ultimate funds recipient.
        send_remittance_advice:
          type: boolean
          nullable: true
          description: Send an email to the counterparty when the payment order is
            sent to the bank. If `null`, `send_remittance_advice` on the Counterparty
            is used.
        expires_at:
          type: string
          format: date-time
          nullable: true
          description: RFP payments require an expires_at. This value must be past
            the effective_date.
        fallback_type:
          type: string
          enum:
          - ach
          description: A payment type to fallback to if the original type is not valid
            for the receiving account. Currently, this only supports falling back
            from RTP to ACH (type=rtp and fallback_type=ach)
        receiving_account:
          type: object
          properties:
            account_type:
              type: string
              enum:
              - cash
              - checking
              - loan
              - non_resident
              - other
              - overdraft
              - savings
              description: Can be `checking`, `savings` or `other`.
            party_type:
              type: string
              enum:
              - business
              - individual
              nullable: true
              description: Either `individual` or `business`.
            party_address:
              "$ref": "#/components/schemas/address_request"
              description: Required if receiving wire payments.
            name:
              type: string
              nullable: true
              description: A nickname for the external account. This is only for internal
                usage and won't affect any payments
            account_details:
              type: array
              items:
                type: object
                properties:
                  account_number:
                    type: string
                  account_number_type:
                    type: string
                    enum:
                    - iban
                    - clabe
                    - wallet_address
                    - pan
                    - other
                required:
                - account_number
            routing_details:
              type: array
              items:
                type: object
                properties:
                  routing_number:
                    type: string
                  routing_number_type:
                    type: string
                    enum:
                    - aba
                    - swift
                    - au_bsb
                    - ca_cpa
                    - cnaps
                    - gb_sort_code
                    - in_ifsc
                    - my_branch_code
                    - br_codigo
                  payment_type:
                    type: string
                    enum:
                    - ach
                    - au_becs
                    - bacs
                    - book
                    - card
                    - check
                    - eft
                    - cross_border
                    - interac
                    - masav
                    - neft
                    - provxchange
                    - rtp
                    - sen
                    - sepa
                    - signet
                    - wire
                required:
                - routing_number
                - routing_number_type
            metadata:
              type: object
              additionalProperties:
                type: string
              example:
                key: value
                foo: bar
                modern: treasury
              description: Additional data represented as key-value pairs. Both the
                key and value must be strings.
            party_name:
              type: string
              description: If this value isn't provided, it will be inherited from
                the counterparty's name.
            party_identifier:
              type: string
            plaid_processor_token:
              type: string
              description: If you've enabled the Modern Treasury + Plaid integration
                in your Plaid account, you can pass the processor token in this field.
            contact_details:
              type: array
              items:
                "$ref": "#/components/schemas/contact_detail_create_request"
          description: Either `receiving_account` or `receiving_account_id` must be
            present. When using `receiving_account_id`, you may pass the id of an
            external account or an internal account.
        ledger_transaction:
          "$ref": "#/components/schemas/ledger_transaction_create_request"
          description: Specifies a ledger transaction object that will be created
            with the payment order. If the ledger transaction cannot be created, then
            the payment order creation will fail. The resulting ledger transaction
            will mirror the status of the payment order.
        line_items:
          type: array
          items:
            "$ref": "#/components/schemas/line_item_request"
          description: An array of line items that must sum up to the amount of the
            payment order.
        transaction_monitoring_enabled:
          type: boolean
          description: A flag that determines whether a payment order should go through
            transaction monitoring.
        documents:
          type: array
          items:
            "$ref": "#/components/schemas/document_create_request"
          description: An array of documents to be attached to the payment order.
            Note that if you attach documents, the request's content type must be
            `multipart/form-data`.
      required:
      - type
      - amount
      - direction
      - originating_account_id
    payment_order_async_create_request:
      type: object
      properties:
        type:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          description: One of `ach`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`,
            `sepa`, `bacs`, `au_becs`, `interac`, `signet`, `provexchange`.
        subtype:
          type: string
          enum:
          - CCD
          - CIE
          - CTX
          - IAT
          - PPD
          - TEL
          - WEB
          nullable: true
          description: An additional layer of classification for the type of payment
            order you are doing. This field is only used for `ach` payment orders
            currently. For `ach`  payment orders, the `subtype`  represents the SEC
            code. We currently support `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and
            `TEL`.
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000 (cents). For RTP, the maximum amount allowed by
            the network is $100,000.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of `credit`, `debit`. Describes the direction money is
            flowing in the transaction. A `credit` moves money from your account to
            someone else's. A `debit` pulls money from someone else's account to your
            own. Note that wire, rtp, and check payments will always be `credit`.
        priority:
          type: string
          enum:
          - high
          - normal
          description: Either `normal` or `high`. For ACH and EFT payments, `high`
            represents a same-day ACH or EFT transfer, respectively. For check payments,
            `high` can mean an overnight check rather than standard mail.
        originating_account_id:
          type: string
          format: uuid
          description: The ID of one of your organization's internal accounts.
        receiving_account_id:
          type: string
          format: uuid
          description: Either `receiving_account` or `receiving_account_id` must be
            present. When using `receiving_account_id`, you may pass the id of an
            external account or an internal account.
        accounting:
          "$ref": "#/components/schemas/accounting"
        accounting_category_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of one of your accounting categories. Note that these
            will only be accessible if your accounting system has been connected.
          deprecated: true
        accounting_ledger_class_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of one of your accounting ledger classes. Note that
            these will only be accessible if your accounting system has been connected.
          deprecated: true
        currency:
          "$ref": "#/components/schemas/currency"
          description: Defaults to the currency of the originating account.
        effective_date:
          type: string
          format: date
          description: 'Date transactions are to be posted to the participants'' account.
            Defaults to the current business day or the next business day if the current
            day is a bank holiday or weekend. Format: yyyy-mm-dd.'
        description:
          type: string
          nullable: true
          description: An optional description for internal use.
        statement_descriptor:
          type: string
          nullable: true
          description: An optional descriptor which will appear in the receiver's
            statement. For `check` payments this field will be used as the memo line.
            For `ach` the maximum length is 10 characters. Note that for ACH payments,
            the name on your bank account will be included automatically by the bank,
            so you can use the characters for other useful information. For `eft`
            the maximum length is 15 characters.
        remittance_information:
          type: string
          nullable: true
          description: For `ach`, this field will be passed through on an addenda
            record. For `wire` payments the field will be passed through as the "Originator
            to Beneficiary Information", also known as OBI or Fedwire tag 6000.
        purpose:
          type: string
          nullable: true
          description: For `wire`, this is usually the purpose which is transmitted
            via the "InstrForDbtrAgt" field in the ISO20022 file. If you are using
            Currencycloud, this is the `payment.purpose_code` field. For `eft`, this
            field is the 3 digit CPA Code that will be attached to the payment.
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
        charge_bearer:
          type: string
          enum:
          - shared
          - sender
          - receiver
          nullable: true
          description: The party that will pay the fees for the payment order. Only
            applies to wire payment orders. Can be one of shared, sender, or receiver,
            which correspond respectively with the SWIFT 71A values `SHA`, `OUR`,
            `BEN`.
        foreign_exchange_indicator:
          type: string
          enum:
          - fixed_to_variable
          - variable_to_fixed
          nullable: true
          description: Indicates the type of FX transfer to initiate, can be either
            `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order
            currency matches the originating account currency.
        foreign_exchange_contract:
          type: string
          nullable: true
          description: If present, indicates a specific foreign exchange contract
            number that has been generated by your financial institution.
        nsf_protected:
          type: boolean
          description: A boolean to determine if NSF Protection is enabled for this
            payment order. Note that this setting must also be turned on in your organization
            settings page.
        originating_party_name:
          type: string
          nullable: true
          description: If present, this will replace your default company name on
            receiver's bank statement. This field can only be used for ACH payments
            currently. For ACH, only the first 16 characters of this string will be
            used. Any additional characters will be truncated.
        ultimate_originating_party_name:
          type: string
          nullable: true
          description: Name of the ultimate originator of the payment order.
        ultimate_originating_party_identifier:
          type: string
          nullable: true
          description: Identifier of the ultimate originator of the payment order.
        ultimate_receiving_party_name:
          type: string
          nullable: true
          description: Name of the ultimate funds recipient.
        ultimate_receiving_party_identifier:
          type: string
          nullable: true
          description: Identifier of the ultimate funds recipient.
        send_remittance_advice:
          type: boolean
          nullable: true
          description: Send an email to the counterparty when the payment order is
            sent to the bank. If `null`, `send_remittance_advice` on the Counterparty
            is used.
        expires_at:
          type: string
          format: date-time
          nullable: true
          description: RFP payments require an expires_at. This value must be past
            the effective_date.
        fallback_type:
          type: string
          enum:
          - ach
          description: A payment type to fallback to if the original type is not valid
            for the receiving account. Currently, this only supports falling back
            from RTP to ACH (type=rtp and fallback_type=ach)
        receiving_account:
          type: object
          properties:
            account_type:
              type: string
              enum:
              - cash
              - checking
              - loan
              - non_resident
              - other
              - overdraft
              - savings
              description: Can be `checking`, `savings` or `other`.
            party_type:
              type: string
              enum:
              - business
              - individual
              nullable: true
              description: Either `individual` or `business`.
            party_address:
              "$ref": "#/components/schemas/address_request"
              description: Required if receiving wire payments.
            name:
              type: string
              nullable: true
              description: A nickname for the external account. This is only for internal
                usage and won't affect any payments
            account_details:
              type: array
              items:
                type: object
                properties:
                  account_number:
                    type: string
                  account_number_type:
                    type: string
                    enum:
                    - iban
                    - clabe
                    - wallet_address
                    - pan
                    - other
                required:
                - account_number
            routing_details:
              type: array
              items:
                type: object
                properties:
                  routing_number:
                    type: string
                  routing_number_type:
                    type: string
                    enum:
                    - aba
                    - swift
                    - au_bsb
                    - ca_cpa
                    - cnaps
                    - gb_sort_code
                    - in_ifsc
                    - my_branch_code
                    - br_codigo
                  payment_type:
                    type: string
                    enum:
                    - ach
                    - au_becs
                    - bacs
                    - book
                    - card
                    - check
                    - eft
                    - cross_border
                    - interac
                    - masav
                    - neft
                    - provxchange
                    - rtp
                    - sen
                    - sepa
                    - signet
                    - wire
                required:
                - routing_number
                - routing_number_type
            metadata:
              type: object
              additionalProperties:
                type: string
              example:
                key: value
                foo: bar
                modern: treasury
              description: Additional data represented as key-value pairs. Both the
                key and value must be strings.
            party_name:
              type: string
              description: If this value isn't provided, it will be inherited from
                the counterparty's name.
            party_identifier:
              type: string
            plaid_processor_token:
              type: string
              description: If you've enabled the Modern Treasury + Plaid integration
                in your Plaid account, you can pass the processor token in this field.
            contact_details:
              type: array
              items:
                "$ref": "#/components/schemas/contact_detail_create_request"
          description: Either `receiving_account` or `receiving_account_id` must be
            present. When using `receiving_account_id`, you may pass the id of an
            external account or an internal account.
        ledger_transaction:
          "$ref": "#/components/schemas/ledger_transaction_create_request"
          description: Specifies a ledger transaction object that will be created
            with the payment order. If the ledger transaction cannot be created, then
            the payment order creation will fail. The resulting ledger transaction
            will mirror the status of the payment order.
        line_items:
          type: array
          items:
            "$ref": "#/components/schemas/line_item_request"
          description: An array of line items that must sum up to the amount of the
            payment order.
        transaction_monitoring_enabled:
          type: boolean
          description: A flag that determines whether a payment order should go through
            transaction monitoring.
      required:
      - type
      - amount
      - direction
      - originating_account_id
    payment_order_update_request:
      type: object
      properties:
        type:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          description: One of `ach`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`,
            `sepa`, `bacs`, `au_becs`, `interac`, `signet`, `provexchange`.
        subtype:
          type: string
          enum:
          - CCD
          - CIE
          - CTX
          - IAT
          - PPD
          - TEL
          - WEB
          nullable: true
          description: An additional layer of classification for the type of payment
            order you are doing. This field is only used for `ach` payment orders
            currently. For `ach`  payment orders, the `subtype`  represents the SEC
            code. We currently support `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and
            `TEL`.
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000 (cents). For RTP, the maximum amount allowed by
            the network is $100,000.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of `credit`, `debit`. Describes the direction money is
            flowing in the transaction. A `credit` moves money from your account to
            someone else's. A `debit` pulls money from someone else's account to your
            own. Note that wire, rtp, and check payments will always be `credit`.
        priority:
          type: string
          enum:
          - high
          - normal
          description: Either `normal` or `high`. For ACH and EFT payments, `high`
            represents a same-day ACH or EFT transfer, respectively. For check payments,
            `high` can mean an overnight check rather than standard mail.
        originating_account_id:
          type: string
          format: uuid
          description: The ID of one of your organization's internal accounts.
        receiving_account_id:
          type: string
          format: uuid
          description: Either `receiving_account` or `receiving_account_id` must be
            present. When using `receiving_account_id`, you may pass the id of an
            external account or an internal account.
        accounting:
          "$ref": "#/components/schemas/accounting"
        accounting_category_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of one of your accounting categories. Note that these
            will only be accessible if your accounting system has been connected.
          deprecated: true
        accounting_ledger_class_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of one of your accounting ledger classes. Note that
            these will only be accessible if your accounting system has been connected.
          deprecated: true
        currency:
          "$ref": "#/components/schemas/currency"
          description: Defaults to the currency of the originating account.
        effective_date:
          type: string
          format: date
          description: 'Date transactions are to be posted to the participants'' account.
            Defaults to the current business day or the next business day if the current
            day is a bank holiday or weekend. Format: yyyy-mm-dd.'
        description:
          type: string
          nullable: true
          description: An optional description for internal use.
        statement_descriptor:
          type: string
          nullable: true
          description: An optional descriptor which will appear in the receiver's
            statement. For `check` payments this field will be used as the memo line.
            For `ach` the maximum length is 10 characters. Note that for ACH payments,
            the name on your bank account will be included automatically by the bank,
            so you can use the characters for other useful information. For `eft`
            the maximum length is 15 characters.
        remittance_information:
          type: string
          nullable: true
          description: For `ach`, this field will be passed through on an addenda
            record. For `wire` payments the field will be passed through as the "Originator
            to Beneficiary Information", also known as OBI or Fedwire tag 6000.
        purpose:
          type: string
          nullable: true
          description: For `wire`, this is usually the purpose which is transmitted
            via the "InstrForDbtrAgt" field in the ISO20022 file. If you are using
            Currencycloud, this is the `payment.purpose_code` field. For `eft`, this
            field is the 3 digit CPA Code that will be attached to the payment.
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
        charge_bearer:
          type: string
          enum:
          - shared
          - sender
          - receiver
          nullable: true
          description: The party that will pay the fees for the payment order. Only
            applies to wire payment orders. Can be one of shared, sender, or receiver,
            which correspond respectively with the SWIFT 71A values `SHA`, `OUR`,
            `BEN`.
        foreign_exchange_indicator:
          type: string
          enum:
          - fixed_to_variable
          - variable_to_fixed
          nullable: true
          description: Indicates the type of FX transfer to initiate, can be either
            `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order
            currency matches the originating account currency.
        foreign_exchange_contract:
          type: string
          nullable: true
          description: If present, indicates a specific foreign exchange contract
            number that has been generated by your financial institution.
        nsf_protected:
          type: boolean
          description: A boolean to determine if NSF Protection is enabled for this
            payment order. Note that this setting must also be turned on in your organization
            settings page.
        originating_party_name:
          type: string
          nullable: true
          description: If present, this will replace your default company name on
            receiver's bank statement. This field can only be used for ACH payments
            currently. For ACH, only the first 16 characters of this string will be
            used. Any additional characters will be truncated.
        ultimate_originating_party_name:
          type: string
          nullable: true
          description: This represents the name of the person that the payment is
            on behalf of when using the CIE subtype for ACH payments. Only the first
            15 characters of this string will be used. Any additional characters will
            be truncated.
        ultimate_originating_party_identifier:
          type: string
          nullable: true
          description: This represents the identifier by which the person is known
            to the receiver when using the CIE subtype for ACH payments. Only the
            first 22 characters of this string will be used. Any additional characters
            will be truncated.
        ultimate_receiving_party_name:
          type: string
          nullable: true
          description: This represents the identifier by which the merchant is known
            to the person initiating an ACH payment with CIE subtype. Only the first
            15 characters of this string will be used. Any additional characters will
            be truncated.
        ultimate_receiving_party_identifier:
          type: string
          nullable: true
          description: This represents the name of the merchant that the payment is
            being sent to when using the CIE subtype for ACH payments. Only the first
            22 characters of this string will be used. Any additional characters will
            be truncated.
        send_remittance_advice:
          type: boolean
          nullable: true
          description: Send an email to the counterparty when the payment order is
            sent to the bank. If `null`, `send_remittance_advice` on the Counterparty
            is used.
        expires_at:
          type: string
          format: date-time
          nullable: true
          description: RFP payments require an expires_at. This value must be past
            the effective_date.
        status:
          type: string
          enum:
          - approved
          - cancelled
          - completed
          - denied
          - failed
          - needs_approval
          - pending
          - processing
          - returned
          - reversed
          - sent
          description: To cancel a payment order, use `cancelled`. To redraft a returned
            payment order, use `approved`. To undo approval on a denied or approved
            payment order, use `needs_approval`.
        counterparty_id:
          type: string
          format: uuid
          description: Required when receiving_account_id is passed the ID of an external
            account.
          nullable: true
        fallback_type:
          type: string
          enum:
          - ach
          description: A payment type to fallback to if the original type is not valid
            for the receiving account. Currently, this only supports falling back
            from RTP to ACH (type=rtp and fallback_type=ach)
        receiving_account:
          type: object
          properties:
            account_type:
              type: string
              enum:
              - cash
              - checking
              - loan
              - non_resident
              - other
              - overdraft
              - savings
              description: Can be `checking`, `savings` or `other`.
            party_type:
              type: string
              enum:
              - business
              - individual
              nullable: true
              description: Either `individual` or `business`.
            party_address:
              "$ref": "#/components/schemas/address_request"
              description: Required if receiving wire payments.
            name:
              type: string
              nullable: true
              description: A nickname for the external account. This is only for internal
                usage and won't affect any payments
            account_details:
              type: array
              items:
                type: object
                properties:
                  account_number:
                    type: string
                  account_number_type:
                    type: string
                    enum:
                    - iban
                    - clabe
                    - wallet_address
                    - pan
                    - other
                required:
                - account_number
            routing_details:
              type: array
              items:
                type: object
                properties:
                  routing_number:
                    type: string
                  routing_number_type:
                    type: string
                    enum:
                    - aba
                    - swift
                    - au_bsb
                    - ca_cpa
                    - cnaps
                    - gb_sort_code
                    - in_ifsc
                    - my_branch_code
                    - br_codigo
                  payment_type:
                    type: string
                    enum:
                    - ach
                    - au_becs
                    - bacs
                    - book
                    - card
                    - check
                    - eft
                    - cross_border
                    - interac
                    - masav
                    - neft
                    - provxchange
                    - rtp
                    - sen
                    - sepa
                    - signet
                    - wire
                required:
                - routing_number
                - routing_number_type
            metadata:
              type: object
              additionalProperties:
                type: string
              example:
                key: value
                foo: bar
                modern: treasury
              description: Additional data represented as key-value pairs. Both the
                key and value must be strings.
            party_name:
              type: string
              description: If this value isn't provided, it will be inherited from
                the counterparty's name.
            party_identifier:
              type: string
            plaid_processor_token:
              type: string
              description: If you've enabled the Modern Treasury + Plaid integration
                in your Plaid account, you can pass the processor token in this field.
            contact_details:
              type: array
              items:
                "$ref": "#/components/schemas/contact_detail_create_request"
          description: Either `receiving_account` or `receiving_account_id` must be
            present. When using `receiving_account_id`, you may pass the id of an
            external account or an internal account.
        line_items:
          type: array
          items:
            "$ref": "#/components/schemas/line_item_request"
          description: An array of line items that must sum up to the amount of the
            payment order.
    payment_reference:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        reference_number:
          type: string
          description: The vendor reference number.
        reference_number_type:
          type: string
          enum:
          - ach_original_trace_number
          - ach_trace_number
          - bankprov_payment_id
          - bnk_dev_prenotification_id
          - bnk_dev_transfer_id
          - bofa_end_to_end_id
          - bofa_transaction_id
          - check_number
          - cross_river_payment_id
          - cross_river_transaction_id
          - currencycloud_conversion_id
          - currencycloud_payment_id
          - dc_bank_transaction_id
          - dwolla_transaction_id
          - eft_trace_number
          - fedwire_imad
          - fedwire_omad
          - first_republic_internal_id
          - goldman_sachs_collection_request_id
          - goldman_sachs_end_to_end_id
          - goldman_sachs_payment_request_id
          - goldman_sachs_request_id
          - goldman_sachs_unique_payment_id
          - interac_message_id
          - jpmc_ccn
          - jpmc_end_to_end_id
          - jpmc_firm_root_id
          - jpmc_p3_id
          - jpmc_payment_batch_id
          - jpmc_payment_information_id
          - lob_check_id
          - other
          - partial_swift_mir
          - pnc_clearing_reference
          - pnc_instruction_id
          - pnc_multipayment_id
          - pnc_payment_trace_id
          - rtp_instruction_id
          - signet_api_reference_id
          - signet_confirmation_id
          - signet_request_id
          - silvergate_payment_id
          - swift_mir
          - swift_uetr
          - usbank_payment_id
          - wells_fargo_payment_id
          - wells_fargo_trace_number
          description: The type of the reference number. Referring to the vendor payment
            id.
      additionalProperties: false
      minProperties: 7
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - reference_number
      - reference_number_type
    ping_response:
      type: object
      properties:
        ping:
          type: string
          example: pong
      additionalProperties: false
      minProperties: 1
      required:
      - ping
    return:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        returnable_id:
          type: string
          format: uuid
          description: The ID of the object being returned or `null`.
          nullable: true
        returnable_type:
          type: string
          enum:
          - incoming_payment_detail
          - paper_item
          - payment_order
          - reversal
          description: The type of object being returned or `null`.
          nullable: true
        code:
          type: string
          enum:
          - '901'
          - '902'
          - '903'
          - '904'
          - '905'
          - '907'
          - '908'
          - '909'
          - '910'
          - '911'
          - '912'
          - '914'
          - R01
          - R02
          - R03
          - R04
          - R05
          - R06
          - R07
          - R08
          - R09
          - R10
          - R11
          - R12
          - R14
          - R15
          - R16
          - R17
          - R20
          - R21
          - R22
          - R23
          - R24
          - R29
          - R31
          - R33
          - R37
          - R38
          - R39
          - R51
          - R52
          - R53
          - currencycloud
          nullable: true
          description: The return code. For ACH returns, this is the required ACH
            return code.
        reason:
          type: string
          nullable: true
          description: Often the bank will provide an explanation for the return,
            which is a short human readable string.
        date_of_death:
          type: string
          nullable: true
          format: date
          description: If the return code is `R14` or `R15` this is the date the deceased
            counterparty passed away.
        additional_information:
          type: string
          nullable: true
          description: Some returns may include additional information from the bank.
            In these cases, this string will be present.
        status:
          type: string
          enum:
          - completed
          - failed
          - pending
          - processing
          - returned
          - sent
          description: The current status of the return.
        transaction_line_item_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the relevant Transaction Line Item or `null`.
        transaction_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the relevant Transaction or `null`.
        internal_account_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the relevant Internal Account.
        type:
          type: string
          enum:
          - ach
          - ach_noc
          - au_becs
          - bacs
          - eft
          - interac
          - manual
          - paper_item
          - sepa
          - wire
          description: 'The type of return. Can be one of: `ach`, `ach_noc`, `au_becs`,
            `bacs`, `eft`, `interac`, `manual`, `paper_item`, `wire`.'
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000.
        currency:
          "$ref": "#/components/schemas/currency"
          description: Currency that this transaction is denominated in.
        failure_reason:
          type: string
          nullable: true
          description: If an originating return failed to be processed by the bank,
            a description of the failure reason will be available.
        role:
          type: string
          enum:
          - originating
          - receiving
          description: The role of the return, can be `originating` or `receiving`.
        reference_numbers:
          type: array
          description: An array of Payment Reference objects.
          items:
            "$ref": "#/components/schemas/payment_reference"
        ledger_transaction_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the ledger transaction linked to the return.
      additionalProperties: false
      minProperties: 22
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - returnable_id
      - returnable_type
      - code
      - reason
      - date_of_death
      - additional_information
      - status
      - transaction_line_item_id
      - transaction_id
      - internal_account_id
      - type
      - amount
      - currency
      - failure_reason
      - role
      - reference_numbers
      - ledger_transaction_id
    return_create_request:
      type: object
      properties:
        returnable_id:
          type: string
          format: uuid
          description: The ID of the object being returned or `null`.
          nullable: true
        code:
          type: string
          enum:
          - '901'
          - '902'
          - '903'
          - '904'
          - '905'
          - '907'
          - '908'
          - '909'
          - '910'
          - '911'
          - '912'
          - '914'
          - R01
          - R02
          - R03
          - R04
          - R05
          - R06
          - R07
          - R08
          - R09
          - R10
          - R11
          - R12
          - R14
          - R15
          - R16
          - R17
          - R20
          - R21
          - R22
          - R23
          - R24
          - R29
          - R31
          - R33
          - R37
          - R38
          - R39
          - R51
          - R52
          - R53
          - currencycloud
          nullable: true
          description: The return code. For ACH returns, this is the required ACH
            return code.
        reason:
          type: string
          nullable: true
          description: An optional description of the reason for the return. This
            is for internal usage and will not be transmitted to the bank.”
        date_of_death:
          type: string
          nullable: true
          format: date
          description: If the return code is `R14` or `R15` this is the date the deceased
            counterparty passed away.
        additional_information:
          type: string
          nullable: true
          description: Some returns may include additional information from the bank.
            In these cases, this string will be present.
        returnable_type:
          type: string
          enum:
          - incoming_payment_detail
          description: The type of object being returned. Currently, this may only
            be incoming_payment_detail.
      required:
      - returnable_id
      - returnable_type
    reversal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        status:
          type: string
          enum:
          - completed
          - failed
          - pending
          - processing
          - returned
          - sent
          description: The current status of the reversal.
        payment_order_id:
          type: string
          format: uuid
          nullable: true
          description: The ID of the relevant Payment Order.
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
        reason:
          type: string
          enum:
          - duplicate
          - incorrect_amount
          - incorrect_receiving_account
          - date_earlier_than_intended
          - date_later_than_intended
          description: The reason for the reversal.
      additionalProperties: false
      minProperties: 9
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - status
      - payment_order_id
      - metadata
      - reason
    reversal_create_request:
      type: object
      properties:
        reason:
          type: string
          enum:
          - duplicate
          - incorrect_amount
          - incorrect_receiving_account
          - date_earlier_than_intended
          - date_later_than_intended
          description: The reason for the reversal. Must be one of `duplicate`, `incorrect_amount`,
            `incorrect_receiving_account`, `date_earlier_than_intended`, `date_later_than_intended`.
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
        ledger_transaction:
          "$ref": "#/components/schemas/ledger_transaction_create_request"
          description: Specifies a ledger transaction object that will be created
            with the reversal. If the ledger transaction cannot be created, then the
            reversal creation will fail. The resulting ledger transaction will mirror
            the status of the reversal.
      required:
      - reason
    routing_detail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        routing_number:
          type: string
          description: The routing number of the bank.
        routing_number_type:
          type: string
          enum:
          - aba
          - au_bsb
          - br_codigo
          - ca_cpa
          - cnaps
          - gb_sort_code
          - in_ifsc
          - my_branch_code
          - swift
          description: One of `aba`, `swift`, `ca_cpa`, `au_bsb`, `gb_sort_code`,
            `in_ifsc`, `cnaps`.
        payment_type:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          nullable: true
          description: If the routing detail is to be used for a specific payment
            type this field will be populated, otherwise null.
        bank_name:
          type: string
          description: The name of the bank.
        bank_address:
          "$ref": "#/components/schemas/address"
      additionalProperties: false
      minProperties: 11
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - routing_number
      - routing_number_type
      - payment_type
      - bank_name
      - bank_address
    routing_detail_create_request:
      type: object
      properties:
        routing_number:
          type: string
          description: The routing number of the bank.
        routing_number_type:
          type: string
          enum:
          - aba
          - au_bsb
          - br_codigo
          - ca_cpa
          - cnaps
          - gb_sort_code
          - in_ifsc
          - my_branch_code
          - swift
          description: One of `aba`, `swift`, `ca_cpa`, `au_bsb`, `gb_sort_code`,
            `in_ifsc`, `cnaps`.
        payment_type:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          nullable: true
          description: If the routing detail is to be used for a specific payment
            type this field will be populated, otherwise null.
      required:
      - routing_number
      - routing_number_type
    routing_number_lookup_request:
      type: object
      properties:
        routing_number:
          type: string
          description: The routing number of the bank.
        routing_number_type:
          type: string
          enum:
          - aba
          - au_bsb
          - ca_cpa
          - gb_sort_code
          - swift
          description: One of `aba`, `au_bsb`, `br_codigo`, `ca_cpa`, `cnaps`, `gb_sort_code`,
            `in_ifsc`, `my_branch_code`, or `swift`. In sandbox mode we currently
            only support `aba` and `swift` with routing numbers '123456789' and 'GRINUST0XXX'
            respectively.
        supported_payment_types:
          type: array
          items:
            type: string
            enum:
            - ach
            - au_becs
            - bacs
            - book
            - card
            - check
            - cross_border
            - eft
            - interac
            - masav
            - neft
            - provxchange
            - rtp
            - sen
            - sepa
            - signet
            - wire
          maxItems: 17
          example:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          description: An array of payment types that are supported for this routing
            number. This can include `ach`, `wire`, `rtp`, `sepa`, `bacs`, `au_becs`
            currently.
        bank_name:
          type: string
          description: The name of the bank.
        bank_address:
          "$ref": "#/components/schemas/address_request"
          description: The address of the bank.
        sanctions:
          type: object
          description: An object containing key-value pairs, each with a sanctions
            list as the key and a boolean value representing whether the bank is on
            that particular sanctions list. Currently, this includes eu_con, uk_hmt,
            us_ofac, and un sanctions lists.
      additionalProperties: false
      minProperties: 5
    incoming_payment_detail_create_request:
      type: object
      properties:
        type:
          type: string
          enum:
          - ach
          - book
          - check
          - eft
          - interac
          - rtp
          - sepa
          - signet
          - wire
          description: One of `ach`, `wire`, `check`.
        direction:
          type: string
          enum:
          - credit
          - debit
          description: One of `credit`, `debit`.
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000.
        currency:
          "$ref": "#/components/schemas/currency"
          nullable: true
          description: Defaults to the currency of the originating account.
        internal_account_id:
          type: string
          format: uuid
          description: The ID of one of your internal accounts.
        virtual_account_id:
          type: string
          format: uuid
          nullable: true
          description: An optional parameter to associate the incoming payment detail
            to a virtual account.
        as_of_date:
          type: string
          format: date
          nullable: true
          description: Defaults to today.
    transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        amount:
          type: integer
          description: Value in specified currency's smallest unit. e.g. $10 would
            be represented as 1000.
        currency:
          "$ref": "#/components/schemas/currency"
          description: Currency that this transaction is denominated in.
        direction:
          type: string
          description: Either `credit` or `debit`.
        vendor_description:
          type: string
          nullable: true
          description: The transaction detail text that often appears in on your bank
            statement and in your banking portal.
        vendor_code:
          type: string
          nullable: true
          description: When applicable, the bank-given code that determines the transaction's
            category. For most banks this is the BAI2/BTRS transaction code.
        vendor_code_type:
          type: string
          enum:
          - bai2
          - bankprov
          - bnk_dev
          - cleartouch
          - cross_river
          - currencycloud
          - dc_bank
          - dwolla
          - evolve
          - goldman_sachs
          - iso20022
          - jpmc
          - mx
          - signet
          - silvergate
          - swift
          - us_bank
          nullable: true
          description: The type of `vendor_code` being reported. Can be one of `bai2`,
            `bankprov`, `bnk_dev`, `cleartouch`, `currencycloud`, `cross_river`, `dc_bank`,
            `dwolla`, `evolve`, `goldman_sachs`, `iso20022`, `jpmc`, `mx`, `signet`,
            `silvergate`, `swift`, or `us_bank`.
        vendor_id:
          type: string
          nullable: true
          description: An identifier given to this transaction by the bank.
        as_of_date:
          type: string
          nullable: true
          format: date
          description: The date on which the transaction occurred.
        as_of_time:
          type: string
          nullable: true
          format: time
          description: The time on which the transaction occurred. Depending on the
            granularity of the timestamp information received from the bank, it may
            be `null`.
        internal_account_id:
          type: string
          format: uuid
          description: The ID of the relevant Internal Account.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
        posted:
          type: boolean
          description: This field will be `true` if the transaction has posted to
            the account.
        vendor_customer_id:
          type: string
          nullable: true
          description: An identifier given to this transaction by the bank, often
            `null`.
        reconciled:
          type: boolean
          description: This field will be `true` if a transaction is reconciled by
            the Modern Treasury system. This means that it has transaction line items
            that sum up to the transaction's amount.
        details:
          type: object
          additionalProperties:
            type: string
          description: 'This field contains additional information that the bank provided
            about the transaction. This is structured data. Some of the data in here
            might overlap with what is in the `vendor_description`. For example, the
            OBI could be a part of the vendor description, and it would also be included
            in here. The attributes that are passed through the details field will
            vary based on your banking partner. Currently, the following keys may
            be in the details object: `originator_name`, `originator_to_beneficiary_information`.'
        type:
          type: string
          enum:
          - ach
          - au_becs
          - bacs
          - book
          - card
          - check
          - cross_border
          - eft
          - interac
          - masav
          - neft
          - provxchange
          - rtp
          - sen
          - sepa
          - signet
          - wire
          description: The type of the transaction. Can be one of `ach`, `wire`, `check`,
            `rtp`, `book`, or `sen`.
      additionalProperties: false
      minProperties: 22
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - amount
      - currency
      - direction
      - vendor_description
      - vendor_code
      - vendor_code_type
      - vendor_id
      - as_of_date
      - as_of_time
      - internal_account_id
      - metadata
      - posted
      - vendor_customer_id
      - reconciled
      - details
      - type
    transaction_update_request:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Additional data in the form of key-value pairs. Pairs can be
            removed by passing an empty string or `null` as the value.
    virtual_account:
      type: object
      properties:
        id:
          type: string
          format: uuid
        object:
          type: string
        live_mode:
          type: boolean
          description: This field will be true if this object exists in the live environment
            or false if it exists in the test environment.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        discarded_at:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          description: The name of the virtual account.
        description:
          type: string
          description: An optional free-form description for internal use.
          nullable: true
        counterparty_id:
          type: string
          format: uuid
          description: The ID of a counterparty that the virtual account belongs to.
            Optional.
          nullable: true
        internal_account_id:
          type: string
          format: uuid
          description: The ID of the internal account that the virtual account is
            in.
        account_details:
          type: array
          description: An array of account detail objects.
          items:
            "$ref": "#/components/schemas/account_detail"
        routing_details:
          type: array
          description: An array of routing detail objects. These will be the routing
            details of the internal account.
          items:
            "$ref": "#/components/schemas/routing_detail"
        debit_ledger_account_id:
          type: string
          format: uuid
          description: The ID of a debit normal ledger account. When money enters
            the virtual account, this ledger account will be debited. Must be accompanied
            by a credit_ledger_account_id if present.
          nullable: true
        credit_ledger_account_id:
          type: string
          format: uuid
          description: The ID of a credit normal ledger account. When money enters
            the virtual account, this ledger account will be credited. Must be accompanied
            by a debit_ledger_account_id if present.
          nullable: true
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
          example:
            key: value
            foo: bar
            modern: treasury
      additionalProperties: false
      minProperties: 15
      required:
      - id
      - object
      - live_mode
      - created_at
      - updated_at
      - discarded_at
      - name
      - description
      - counterparty_id
      - internal_account_id
      - account_details
      - routing_details
      - debit_ledger_account_id
      - credit_ledger_account_id
      - metadata
    virtual_account_create_request:
      type: object
      properties:
        name:
          type: string
          description: The name of the virtual account.
        description:
          type: string
          description: An optional description for internal use.
        counterparty_id:
          type: string
          format: uuid
          description: The ID of the counterparty that the virtual account belongs
            to.
        internal_account_id:
          type: string
          format: uuid
          description: The ID of the internal account that this virtual account is
            associated with.
        account_details:
          type: array
          items:
            "$ref": "#/components/schemas/account_detail"
          description: An array of account detail objects.
        routing_details:
          type: array
          items:
            "$ref": "#/components/schemas/routing_detail"
          description: An array of routing detail objects.
        debit_ledger_account_id:
          type: string
          format: uuid
          description: The ID of a debit normal ledger account. When money enters
            the virtual account, this ledger account will be debited. Must be accompanied
            by a credit_ledger_account_id if present.
        credit_ledger_account_id:
          type: string
          format: uuid
          description: The ID of a credit normal ledger account. When money leaves
            the virtual account, this ledger account will be credited. Must be accompanied
            by a debit_ledger_account_id if present.
        metadata:
          type: object
          description: Additional data represented as key-value pairs. Both the key
            and value must be strings.
          additionalProperties:
            type: string
      required:
      - name
      - internal_account_id
    virtual_account_update_request:
      type: object
      properties:
        name:
          type: string
          nullable: true
        counterparty_id:
          type: string
          format: uuid
        metadata:
          type: object
          additionalProperties:
            type: string
